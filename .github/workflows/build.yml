name: Multi-Platform Builder (Qt6)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

# Ensure only one run for the same ref at a time
concurrency:
  group: trndi-build-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build (${{ matrix.name }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # -------- Linux AMD64 --------
          - name: linux-amd64
            os_target: linux
            arch: amd64
            runner: ubuntu-latest
            fpc_laz_url: "..."     # Lazarus + FPC .deb URL
            fpc_src_url: "..."     # FPC source .deb URL
            laz_url: "..."         # Lazarus IDE .deb URL
            qt6pas_deb: "libqt6pas6_6.2.10-1_amd64.deb"
            qt6pas_dev_deb: "libqt6pas6-dev_6.2.10-1_amd64.deb"
            qt6_arch_folder: "x86_64-linux"
            deb_arch: amd64
            rpm_arch: x86_64
            cpu_flag: ""
            build_mode: "Extensions (Release)"
            project_file: "Trndi.lpr"

          # -------- Linux ARM64 --------
          - name: linux-arm64
            os_target: linux
            arch: arm64
            runner: ubuntu-24.04-arm
            fpc_laz_url: "..."
            fpc_src_url: "..."
            laz_url: "..."
            qt6pas_deb: "libqt6pas6_6.2.10-1_arm64.deb"
            qt6pas_dev_deb: "libqt6pas6-dev_6.2.10-1_arm64.deb"
            qt6_arch_folder: "aarch64-linux"
            deb_arch: arm64
            rpm_arch: aarch64
            cpu_flag: "--cpu=aarch64"
            build_mode: "No Ext (Release)"
            project_file: "Trndi.lpi"

          # -------- macOS ARM64 --------
          - name: macos-arm64
            os_target: macos
            arch: arm64
            runner: macos-14

          # -------- Windows x64 --------
          - name: windows-x64
            os_target: windows
            arch: x64
            runner: windows-latest

    steps:
      - uses: actions/checkout@v4

      # -------- Linux Build --------
      - name: Build on Linux
        if: matrix.os_target == 'linux'
        run: |
          # Install build prerequisites
          sudo apt-get update
          sudo apt-get install -y p7zip-full build-essential wget curl git cmake ninja-build pkg-config qt6-base-dev qt6-tools-dev qt6-base-dev-tools
          
          # Install Lazarus + FPC
          curl -fsSL -o fpc-laz.deb "${{ matrix.fpc_laz_url }}"
          curl -fsSL -o fpc-src.deb "${{ matrix.fpc_src_url }}"
          curl -fsSL -o lazarus.deb "${{ matrix.laz_url }}"
          sudo dpkg -i fpc-laz.deb fpc-src.deb lazarus.deb || true
          sudo apt-get -f install -y
          
          # Install Qt6Pas
          BASE_RELEASE="https://github.com/davidbannon/libqt6pas/releases/download/v6.2.10"
          curl -fL -o "${{ matrix.qt6pas_deb }}" "${BASE_RELEASE}/${{ matrix.qt6pas_deb }}"
          curl -fL -o "${{ matrix.qt6pas_dev_deb }}" "${BASE_RELEASE}/${{ matrix.qt6pas_dev_deb }}"
          sudo apt-get install -y "./${{ matrix.qt6pas_deb }}" "./${{ matrix.qt6pas_dev_deb }}"
          
          # Fetch static libs
          mkdir -p ./static
          curl -fsSL -o mormot2static.7z 'https://github.com/synopse/mORMot2/releases/download/2.3.stable/mormot2static.7z'
          7z x mormot2static.7z -o./static -y >/dev/null
          git clone https://github.com/synopse/mORMot2.git externals/mORMot2
          cp -r ./static/${{ matrix.qt6_arch_folder }}/* .
          
          # Build binaries
          lazbuild externals/mORMot2/packages/lazarus/mormot2.lpk
          lazbuild --widgetset=qt6 --build-mode="${{ matrix.build_mode }}" ${{ matrix.cpu_flag }} ${{ matrix.project_file }}
          
          # Create portable ZIP (no PNG icon)
          mkdir -p artifacts
          cp Trndi artifacts/
          [ -d "lang" ] && cp -r lang artifacts/
          7z a -tzip Trndi-linux-${{ matrix.arch }}.zip ./artifacts/* >/dev/null
          
          # Build DEB & RPM packages (with icon in pixmaps)
          sudo apt-get install -y ruby ruby-dev build-essential rpm
          sudo gem install --no-document fpm
          PKG_DIR="pkgroot"
          mkdir -p "$PKG_DIR/usr/local/trndi"
          cp Trndi "$PKG_DIR/usr/local/trndi/"
          [ -d "lang" ] && cp -r lang "$PKG_DIR/usr/local/trndi/"
          mkdir -p "$PKG_DIR/usr/share/pixmaps"
          [ -f "Trndi.png" ] && cp Trndi.png "$PKG_DIR/usr/share/pixmaps/"
          ICON=Trndi
          mkdir -p "$PKG_DIR/usr/share/applications"
          echo "[Desktop Entry]
          Name=Trndi
          Exec=/usr/local/trndi/Trndi
          Icon=${ICON}
          Type=Application
          Categories=Utility;" > "$PKG_DIR/usr/share/applications/trndi.desktop"

          fpm -s dir -t deb -n trndi -v 2.1.${GITHUB_RUN_NUMBER} --architecture ${{ matrix.deb_arch }} --license "GPLv3" --description "Trndi application with translations" -C "$PKG_DIR" .
          fpm -s dir -t rpm -n trndi -v 2.1.${GITHUB_RUN_NUMBER} --architecture ${{ matrix.rpm_arch }} --license "GPLv3" --description "Trndi application with translations" -C "$PKG_DIR" .

          # Move to artifacts
          mv trndi_*${{ matrix.deb_arch }}.deb artifacts/
          mv trndi-*.${{ matrix.rpm_arch }}.rpm artifacts/

      # -------- macOS Build --------
      - name: Build on macOS
        if: matrix.os_target == 'macos'
        run: |
          # Install MacPorts + toolchain
          # ...
          # Build Trndi + create .zip and .dmg 
          # (Full commands kept as-is)

      # -------- Windows Build --------
      - name: Build on Windows
        if: matrix.os_target == 'windows'
        shell: pwsh
        run: |
          # Install 7-Zip and Lazarus
          # ...
          # Build Trndi.exe + create .zip 
          # (Full commands kept as-is)

      # -------- Upload artifacts per platform --------
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.name }}
          path: |
            *.zip
            *.dmg
            artifacts/*.deb
            artifacts/*.rpm
          if-no-files-found: ignore

  # -------- Publish unified release --------
  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./release-files

      - name: Create or update GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          TAG="v${SHORT_SHA}"

          # Central release notes for all platforms
          cat > RELEASE_NOTES.md <<EOF
          # Trndi Release ${TAG}

          > Automated build for Linux (amd64 & arm64), macOS (arm64), and Windows (x64).

          ### Linux (amd64 / x86_64)
          - Trndi-linux-amd64.zip — Portable binary + languages
          - trndi_*.deb — Ubuntu/Debian installer (amd64)  
          - trndi-*.rpm — Fedora/OpenSUSE installer (x86_64)

          ### Linux (arm64 / aarch64)
          - Trndi-linux-arm64.zip — Portable binary + languages
          - trndi_*.deb — Ubuntu/Debian installer (arm64)  
          - trndi-*.rpm — Fedora/OpenSUSE installer (aarch64)

          ### macOS (Apple Silicon)
          - Trndi-macos-silicon.zip — Portable binary + languages
          - Trndi-macos-silicon.dmg — Application bundle for /Applications

          ### Windows (x64)
          - Trndi-windows-x64.zip — Portable binary + languages
          EOF

          # Create release if it does not exist
          if ! gh release view "$TAG" >/dev/null 2>&1; then
            gh release create "$TAG" --title "Trndi ${TAG}" --notes-file RELEASE_NOTES.md
          fi

          # Upload all platform artifacts to the same release
          gh release upload "$TAG" ./release-files/** --clobber