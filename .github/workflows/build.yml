name: Multi-Platform Builder (Qt6)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

# Prevent multiple parallel builds for the same commit
concurrency:
  group: trndi-build-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build (${{ matrix.name }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # -------- Linux AMD64 --------
          - name: linux-amd64
            os_target: linux
            arch: amd64
            runner: ubuntu-latest
            fpc_laz_url: "https://sourceforge.net/projects/lazarus/files/Lazarus%20Linux%20amd64%20DEB/Lazarus%204.2/fpc-laz_3.2.2-210709_amd64.deb/download"
            fpc_src_url: "https://sourceforge.net/projects/lazarus/files/Lazarus%20Linux%20amd64%20DEB/Lazarus%204.2/fpc-src_3.2.2-210709_amd64.deb/download"
            laz_url: "https://sourceforge.net/projects/lazarus/files/Lazarus%20Linux%20amd64%20DEB/Lazarus%204.2/lazarus-project_4.2.0-0_amd64.deb/download"
            qt6pas_deb: "libqt6pas6_6.2.10-1_amd64.deb"
            qt6pas_dev_deb: "libqt6pas6-dev_6.2.10-1_amd64.deb"
            qt6_arch_folder: "x86_64-linux"
            deb_arch: amd64
            rpm_arch: x86_64
            cpu_flag: ""
            build_mode: "Extensions (Release)"
            project_file: "Trndi.lpr"

          # -------- Linux ARM64 --------
          - name: linux-arm64
            os_target: linux
            arch: arm64
            runner: ubuntu-24.04-arm
            fpc_laz_url: "https://sourceforge.net/projects/lazarus/files/Lazarus%20Linux%20arm64%20DEB/Lazarus%204.2/fpc-laz_3.2.3-240813_arm64.deb/download"
            fpc_src_url: "https://sourceforge.net/projects/lazarus/files/Lazarus%20Linux%20arm64%20DEB/Lazarus%204.2/fpc-src_3.2.3-240813_arm64.deb/download"
            laz_url: "https://sourceforge.net/projects/lazarus/files/Lazarus%20Linux%20arm64%20DEB/Lazarus%204.2/lazarus-project_4.2.0-0_arm64.deb/download"
            qt6pas_deb: "libqt6pas6_6.2.10-1_arm64.deb"
            qt6pas_dev_deb: "libqt6pas6-dev_6.2.10-1_arm64.deb"
            qt6_arch_folder: "aarch64-linux"
            deb_arch: arm64
            rpm_arch: aarch64
            cpu_flag: "--cpu=aarch64"
            build_mode: "No Ext (Release)"
            project_file: "Trndi.lpi"

          # -------- macOS ARM64 --------
          - name: macos-arm64
            os_target: macos
            arch: arm64
            runner: macos-14

          # -------- Windows x64 --------
          - name: windows-x64
            os_target: windows
            arch: x64
            runner: windows-latest

    steps:
      - uses: actions/checkout@v4

      # ===================== LINUX BUILD =====================
      - name: Build on Linux
        if: matrix.os_target == 'linux'
        run: |
          set -euo pipefail
          # Install build tools and Qt6
          sudo apt-get update
          sudo apt-get install -y p7zip-full build-essential wget curl git cmake ninja-build pkg-config qt6-base-dev qt6-tools-dev qt6-base-dev-tools
          # Install Lazarus + FPC
          curl -fsSL -o fpc-laz.deb "${{ matrix.fpc_laz_url }}"
          curl -fsSL -o fpc-src.deb "${{ matrix.fpc_src_url }}"
          curl -fsSL -o lazarus.deb "${{ matrix.laz_url }}"
          sudo dpkg -i fpc-laz.deb fpc-src.deb lazarus.deb || true
          sudo apt-get -f install -y
          # Install Qt6Pas bindings
          BASE_RELEASE="https://github.com/davidbannon/libqt6pas/releases/download/v6.2.10"
          curl -fL -o "${{ matrix.qt6pas_deb }}" "${BASE_RELEASE}/${{ matrix.qt6pas_deb }}"
          curl -fL -o "${{ matrix.qt6pas_dev_deb }}" "${BASE_RELEASE}/${{ matrix.qt6pas_dev_deb }}"
          sudo apt-get install -y "./${{ matrix.qt6pas_deb }}" "./${{ matrix.qt6pas_dev_deb }}"
          # Get static libs + sources
          mkdir -p ./static
          curl -fsSL -o mormot2static.7z 'https://github.com/synopse/mORMot2/releases/download/2.3.stable/mormot2static.7z'
          7z x mormot2static.7z -o./static -y >/dev/null
          git clone https://github.com/synopse/mORMot2.git externals/mORMot2
          cp -r ./static/${{ matrix.qt6_arch_folder }}/* .
          # Build Trndi
          lazbuild externals/mORMot2/packages/lazarus/mormot2.lpk
          lazbuild --widgetset=qt6 --build-mode="${{ matrix.build_mode }}" ${{ matrix.cpu_flag }} ${{ matrix.project_file }}
          # Package portable ZIP (no PNG)
          mkdir -p artifacts
          cp Trndi artifacts/
          [ -d "lang" ] && cp -r lang artifacts/
          7z a -tzip Trndi-linux-${{ matrix.arch }}.zip ./artifacts/* >/dev/null
          # Build DEB & RPM with icon in system path
          sudo apt-get install -y ruby ruby-dev build-essential rpm
          sudo gem install --no-document fpm
          PKG_DIR="pkgroot"
          mkdir -p "$PKG_DIR/usr/local/trndi"
          cp Trndi "$PKG_DIR/usr/local/trndi/"
          [ -d "lang" ] && cp -r lang "$PKG_DIR/usr/local/trndi/"
          mkdir -p "$PKG_DIR/usr/share/pixmaps"
          [ -f "Trndi.png" ] && cp Trndi.png "$PKG_DIR/usr/share/pixmaps/"
          ICON=Trndi
          mkdir -p "$PKG_DIR/usr/share/applications"
          echo "[Desktop Entry]
Name=Trndi
Exec=/usr/local/trndi/Trndi
Icon=${ICON}
Type=Application
Categories=Utility;" > "$PKG_DIR/usr/share/applications/trndi.desktop"
          fpm -s dir -t deb -n trndi -v 2.1.${GITHUB_RUN_NUMBER} --architecture ${{ matrix.deb_arch }} --license "GPLv3" --description "Trndi application with translations" -C "$PKG_DIR" .
          fpm -s dir -t rpm -n trndi -v 2.1.${GITHUB_RUN_NUMBER} --architecture ${{ matrix.rpm_arch }} --license "GPLv3" --description "Trndi application with translations" -C "$PKG_DIR" .
          mv trndi_*${{ matrix.deb_arch }}.deb artifacts/
          mv trndi-*.${{ matrix.rpm_arch }}.rpm artifacts/

      # ===================== MACOS BUILD =====================
      - name: Build on macOS
        if: matrix.os_target == 'macos'
        run: |
          set -euo pipefail
          # Install MacPorts
          OSMAJOR="$(sw_vers -productVersion | cut -d. -f1)"
          case "$OSMAJOR" in
            14) OSNAME="14-Sonoma" ;;
            13) OSNAME="13-Ventura" ;;
            12) OSNAME="12-Monterey" ;;
            11) OSNAME="11-BigSur" ;;
            *) echo "Unsupported macOS major version: ${OSMAJOR}" >&2; exit 1 ;;
          esac
          curl -fsSL -o MacPorts.pkg "https://github.com/macports/macports-base/releases/latest/download/MacPorts-${OSNAME}.pkg"
          sudo installer -pkg MacPorts.pkg -target /
          export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
          sudo port -v selfupdate
          sudo port -N install fpc lazarus p7zip create-dmg
          # Prepare static libs & sources
          curl -fsSL -o mormot2static.7z 'https://github.com/synopse/mORMot2/releases/download/2.3.stable/mormot2static.7z'
          mkdir -p ./static
          7z x mormot2static.7z -o./static -y >/dev/null
          git clone https://github.com/synopse/mORMot2.git externals/mORMot2
          cp -r ./static/aarch64-darwin/* .
          # Build Trndi
          lazbuild externals/mORMot2/packages/lazarus/mormot2.lpk
          lazbuild --build-mode="No Ext (Release)" --ws=cocoa --cpu=aarch64 --os=darwin Trndi.lpi
          # Package ZIP
          mkdir -p artifacts
          cp Trndi artifacts/
          [ -d "lang" ] && cp -r lang artifacts/
          7z a -tzip Trndi-macos-silicon.zip ./artifacts/* >/dev/null
          # Create DMG
          chmod +x dist/macos.sh
          if [ -d "lang" ]; then cp -r lang dist/; fi
          (cd dist && ./macos.sh)
          mv dist/Trndi.dmg Trndi-macos-silicon.dmg

      # ===================== WINDOWS BUILD =====================
      - name: Build on Windows
        if: matrix.os_target == 'windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          # Ensure 7-Zip
          choco install 7zip -y
          # Install Lazarus
          $LazUrl = 'https://sourceforge.net/projects/lazarus/files/Lazarus%20Windows%2064%20bits/Lazarus%204.2/lazarus-4.2-fpc-3.2.2-win64.exe/download'
          Invoke-WebRequest -Uri $LazUrl -OutFile 'lazarus-4.2.exe'
          Start-Process '.\lazarus-4.2.exe' -ArgumentList '/VERYSILENT','/SP-','/NORESTART','/DIR=C:\Lazarus' -Wait
          # Prepare static libs & sources
          New-Item -ItemType Directory -Path .\static -Force | Out-Null
          Invoke-WebRequest -Uri "https://github.com/synopse/mORMot2/releases/download/2.3.stable/mormot2static.7z" -OutFile "mormot2static.7z"
          & 'C:\Program Files\7-Zip\7z.exe' x '.\mormot2static.7z' -o'.\static' -y | Out-Null
          git clone https://github.com/synopse/mORMot2.git externals/mORMot2
          xcopy .\static\x86_64-win64\*.* . /Y /E /I | Out-Null
          # Build Trndi.exe
          & 'C:\Lazarus\lazbuild.exe' 'externals\mORMot2\packages\lazarus\mormot2.lpk'
          & 'C:\Lazarus\lazbuild.exe' --lazarusdir='C:\Lazarus' --build-mode='Extensions (Release)' 'Trndi.lpi'
          # Package ZIP
          New-Item -ItemType Directory -Path artifacts -Force | Out-Null
          Copy-Item '.\Trndi.exe' -Destination '.\artifacts\'
          if (Test-Path '.\lang') { Copy-Item '.\lang' -Destination '.\artifacts\lang' -Recurse }
          & 'C:\Program Files\7-Zip\7z.exe' a -tzip 'Trndi-windows-x64.zip' .\artifacts\* | Out-Null

      # ===================== UPLOAD =====================
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.name }}
          path: |
            *.zip
            *.dmg
            artifacts/*.deb
            artifacts/*.rpm
          if-no-files-found: ignore

  # ===================== PUBLISH =====================
  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./release-files

      - name: Determine next release tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get numeric latest tag (strip 'v'), increment
          LAST_TAG=$(gh release list --limit 100 | awk '{print $1}' | grep '^v[0-9]\+$' | sed 's/^v//' | sort -n | tail -1)
          if [ -z "$LAST_TAG" ]; then
            NEXT_TAG=1
          else
            NEXT_TAG=$((LAST_TAG + 1))
          fi
          echo "TAG=v${NEXT_TAG}" >> $GITHUB_ENV

      - name: Create or update GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat > RELEASE_NOTES.md <<EOF
          # Trndi Release ${TAG}

          > This is an automated build of Trndi's latest source code.

          ### Linux (amd64 / x86_64)
          - **Trndi-linux-amd64.zip** — Portable binary + languages  
          - **trndi_*.deb** — Ubuntu/Debian installer (amd64)  
          - **trndi-*.rpm** — Fedora/OpenSUSE installer (x86_64)

          ### Linux (arm64 / aarch64)
          - **Trndi-linux-arm64.zip** — Portable binary + languages  
          - **trndi_*.deb** — Ubuntu/Debian installer (arm64)  
          - **trndi-*.rpm** — Fedora/OpenSUSE installer (aarch64)

          ### macOS (Apple Silicon)
          - **Trndi-macos-silicon.zip** — Portable binary + languages  
          - **Trndi-macos-silicon.dmg** — App bundle for /Applications

          ### Windows (x64)
          - **Trndi-windows-x64.zip** — Portable binary + languages
          EOF

          if ! gh release view "$TAG" >/dev/null 2>&1; then
            gh release create "$TAG" --title "Trndi ${TAG}" --notes-file RELEASE_NOTES.md
          fi

          gh release upload "$TAG" ./release-files/** --clobber