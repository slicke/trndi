name: Build & Release (All Platforms)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

# ---------------------------------------------------------------------------------
# WORKFLOW OVERVIEW
# ---------------------------------------------------------------------------------
# 1. "version" job determines the next build number starting at 100 if no releases exist.
#    This number is used for both the GitHub release tag and Linux package versions.
#
# 2. "build" job runs in a matrix to build:
#    - Linux (amd64, arm64)
#    - macOS (arm64)
#    - Windows (x64)
#    Each platform produces its own artifact (.zip, .deb/.rpm for Linux, .dmg for macOS)
#
# 3. "publish" job runs regardless of build outcome ("if: always()").
#    - Downloads all artifacts
#    - Uses "find -type f" to upload only files to the release (avoids directory errors)
#    - Updates or creates the GitHub release with the unified version number
# ---------------------------------------------------------------------------------

concurrency:
  group: trndi-build-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # ===================== DETERMINE VERSION =====================
  version:
    runs-on: ubuntu-latest
    outputs:
      build_number: ${{ steps.setver.outputs.build_number }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine next build number (start at 100 if none exist)
        id: setver
        run: |
          git fetch --tags

          # Look for the highest tag of the form "build-<number>"
          LATEST_TAG=$(git tag --sort=-v:refname \
            | grep -E '^build-[0-9]+$' \
            | sed 's/^build-//' \
            | sort -n | tail -1)

          if [ -z "$LATEST_TAG" ]; then
            NEXT_TAG=100
          else
            NEXT_TAG=$((LATEST_TAG + 1))
          fi

          echo "build_number=${NEXT_TAG}" >> $GITHUB_OUTPUT
          echo "Next build number: ${NEXT_TAG}"

  # ===================== BUILD MATRIX =====================
  build:
    needs: version
    name: Build (${{ matrix.name }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # -------- Linux AMD64 --------
          - name: linux-amd64
            upload_name: linux-amd64-build
            os_target: linux
            arch: amd64
            runner: ubuntu-latest
            fpc_laz_url: "https://sourceforge.net/projects/lazarus/files/Lazarus%20Linux%20amd64%20DEB/Lazarus%204.2/fpc-laz_3.2.2-210709_amd64.deb/download"
            fpc_src_url: "https://sourceforge.net/projects/lazarus/files/Lazarus%20Linux%20amd64%20DEB/Lazarus%204.2/fpc-src_3.2.2-210709_amd64.deb/download"
            laz_url: "https://sourceforge.net/projects/lazarus/files/Lazarus%20Linux%20amd64%20DEB/Lazarus%204.2/lazarus-project_4.2.0-0_amd64.deb/download"
            qt6pas_deb: "libqt6pas6_6.2.10-1_amd64.deb"
            qt6pas_dev_deb: "libqt6pas6-dev_6.2.10-1_amd64.deb"
            qt6_arch_folder: "x86_64-linux"
            deb_arch: amd64
            rpm_arch: x86_64
            cpu_flag: ""
            build_mode: "Extensions (Release)"
            project_file: "Trndi.lpr"

          # -------- Linux ARM64 --------
          - name: linux-arm64
            upload_name: linux-arm64-build
            os_target: linux
            arch: arm64
            runner: ubuntu-24.04-arm
            fpc_laz_url: "https://sourceforge.net/projects/lazarus/files/Lazarus%20Linux%20arm64%20DEB/Lazarus%204.2/fpc-laz_3.2.3-240813_arm64.deb/download"
            fpc_src_url: "https://sourceforge.net/projects/lazarus/files/Lazarus%20Linux%20arm64%20DEB/Lazarus%204.2/fpc-src_3.2.3-240813_arm64.deb/download"
            laz_url: "https://sourceforge.net/projects/lazarus/files/Lazarus%20Linux%20arm64%20DEB/Lazarus%204.2/lazarus-project_4.2.0-0_arm64.deb/download"
            qt6pas_deb: "libqt6pas6_6.2.10-1_arm64.deb"
            qt6pas_dev_deb: "libqt6pas6-dev_6.2.10-1_arm64.deb"
            qt6_arch_folder: "aarch64-linux"
            deb_arch: arm64
            rpm_arch: aarch64
            cpu_flag: "--cpu=aarch64"
            build_mode: "No Ext (Release)"
            project_file: "Trndi.lpi"

          # -------- macOS ARM64 --------
          - name: macos-arm64
            upload_name: macos-arm64-build
            os_target: macos
            arch: arm64
            runner: macos-14

          # -------- Windows x64 --------
          - name: windows-x64
            upload_name: windows-x64-build
            os_target: windows
            arch: x64
            runner: windows-latest

    steps:
      - uses: actions/checkout@v4

      # ===================== LINUX BUILDER =====================
      - name: Build on Linux
        if: matrix.os_target == 'linux'
        run: |
          set -euo pipefail
          # Install Qt6 build toolchain
          sudo apt-get update
          # Include libcurl development package (needed for building against libcurl)
          sudo apt-get install -y p7zip-full build-essential wget curl git cmake ninja-build pkg-config qt6-base-dev qt6-tools-dev qt6-base-dev-tools libcurl4-openssl-dev

          # Install Lazarus + FPC
          curl -fsSL -o fpc-laz.deb "${{ matrix.fpc_laz_url }}"
          curl -fsSL -o fpc-src.deb "${{ matrix.fpc_src_url }}"
          curl -fsSL -o lazarus.deb "${{ matrix.laz_url }}"
          sudo dpkg -i fpc-laz.deb fpc-src.deb lazarus.deb || true
          sudo apt-get -f install -y

          # Install Qt6Pas bindings
          BASE_RELEASE="https://github.com/davidbannon/libqt6pas/releases/download/v6.2.10"
          curl -fL -o "${{ matrix.qt6pas_deb }}" "${BASE_RELEASE}/${{ matrix.qt6pas_deb }}"
          curl -fL -o "${{ matrix.qt6pas_dev_deb }}" "${BASE_RELEASE}/${{ matrix.qt6pas_dev_deb }}"
          sudo apt-get install -y "./${{ matrix.qt6pas_deb }}" "./${{ matrix.qt6pas_dev_deb }}"

          # Fetch static mORMot2 libs
          mkdir -p ./static
          curl -fsSL -o mormot2static.7z 'https://github.com/synopse/mORMot2/releases/download/2.3.stable/mormot2static.7z'
          7z x mormot2static.7z -o./static -y >/dev/null
          git clone https://github.com/synopse/mORMot2.git externals/mORMot2
          cp -r ./static/${{ matrix.qt6_arch_folder }}/* .

          # Write build metadata unit for CI (overrides dev stub)
          BUILD_DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          GIT_SHA="$(git rev-parse --short HEAD)"
          mkdir -p units/misc
          cat > units/misc/buildinfo.pp <<EOF
          unit buildinfo;
          {\$mode objfpc}{\$H+}
          interface
          const
            BUILD_NUMBER = '${{ needs.version.outputs.build_number }}';
            BUILD_TAG    = 'build-${{ needs.version.outputs.build_number }}';
            BUILD_DATE   = '${BUILD_DATE}';
            GIT_SHA      = '${GIT_SHA}';
            GIT_BRANCH   = '${{ github.ref_name }}';
            CI           = True;
          implementation
          end.
          EOF

          # Build Trndi
          lazbuild externals/mORMot2/packages/lazarus/mormot2.lpk
          lazbuild --widgetset=qt6 --build-mode="${{ matrix.build_mode }}" ${{ matrix.cpu_flag }} ${{ matrix.project_file }}

          # Package portable ZIP (no PNG icon inside)
          mkdir -p artifacts
          cp Trndi artifacts/
          [ -d "lang" ] && cp -r lang artifacts/
          7z a -tzip Trndi-linux-${{ matrix.arch }}.zip ./artifacts/* >/dev/null

          # Create DEB & RPM installers (with icon inside system paths)
          sudo apt-get install -y ruby ruby-dev build-essential rpm
          sudo gem install --no-document fpm
          PKG_DIR="pkgroot"
          mkdir -p "$PKG_DIR/usr/local/trndi"
          cp Trndi "$PKG_DIR/usr/local/trndi/"
          [ -d "lang" ] && cp -r lang "$PKG_DIR/usr/local/trndi/"
          mkdir -p "$PKG_DIR/usr/share/pixmaps"
          [ -f "Trndi.png" ] && cp Trndi.png "$PKG_DIR/usr/share/pixmaps/"
          ICON=Trndi
          mkdir -p "$PKG_DIR/usr/share/applications"
          echo "[Desktop Entry]
          Name=Trndi
          GenericName=GCM Viewer
          X-GNOME-FullName=Trndi
          X-KDE-FullName=Trndi
          X-Unity-FullName=Trndi
          X-KDE-Keywords=trndi;gcm;glucose;monitoring;
          X-DBUS-ServiceName=com.slicke.trndi
          X-DBUS-StartupType=Multi
          Comment=Blood glucose monitoring application
          Exec=/usr/local/trndi/Trndi %U
          Icon=${ICON}
          Type=Application
          Categories=Utility;" > "$PKG_DIR/usr/share/applications/trndi.desktop"
          # Determine package version from Trndi.lpi (Major.Minor.<build>)
          MAJOR=$(sed -n -E 's/.*<MajorVersionNr[^>]*Value="([0-9]+)".*/\1/p' Trndi.lpi | head -n1)
          MINOR=$(sed -n -E 's/.*<MinorVersionNr[^>]*Value="([0-9]+)".*/\1/p' Trndi.lpi | head -n1)
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PKG_VERSION="${MAJOR}.${MINOR}.${{ needs.version.outputs.build_number }}"
          echo "Packaging version: ${PKG_VERSION}"

          fpm -s dir -t deb -n trndi -v "${PKG_VERSION}" --architecture ${{ matrix.deb_arch }} --license "GPLv3" --description "Trndi CGM Viewer" -C "$PKG_DIR" .
          fpm -s dir -t rpm -n trndi -v "${PKG_VERSION}" --architecture ${{ matrix.rpm_arch }} --license "GPLv3" --description "Trndi CGM Viewer" -C "$PKG_DIR" .
          mv trndi_*${{ matrix.deb_arch }}.deb artifacts/
          mv trndi-*.${{ matrix.rpm_arch }}.rpm artifacts/

      # ===================== MACOS BUILDER =====================
      - name: Build on macOS
        if: matrix.os_target == 'macos'
        run: |
          set -euo pipefail
          # Determine correct MacPorts pkg for OS
          OSMAJOR="$(sw_vers -productVersion | cut -d. -f1)"
          case "$OSMAJOR" in
            14) OSNAME="14-Sonoma" ;;
            13) OSNAME="13-Ventura" ;;
            12) OSNAME="12-Monterey" ;;
            11) OSNAME="11-BigSur" ;;
            *) echo "Unsupported macOS version: ${OSMAJOR}" >&2; exit 1 ;;
          esac
          # Fetch MacPorts installer directly from official site
          PKG_URL="$(curl -fsSL https://www.macports.org/install.php | grep -Eo "https://[^\"[:space:]]*MacPorts-[0-9.]+-${OSNAME}\.pkg" | head -n1 || true)"
          [ -n "$PKG_URL" ] || { echo "Failed to resolve MacPorts pkg URL" >&2; exit 1; }
          curl -fsSL -o MacPorts.pkg "$PKG_URL"
          sudo installer -pkg MacPorts.pkg -target /
          export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
          sudo port -v selfupdate
          sudo port -N install fpc lazarus p7zip create-dmg
          # Prepare static libs + sources
          curl -fsSL -o mormot2static.7z 'https://github.com/synopse/mORMot2/releases/download/2.3.stable/mormot2static.7z'
          mkdir -p ./static
          7z x mormot2static.7z -o./static -y >/dev/null
          git clone https://github.com/synopse/mORMot2.git externals/mORMot2
          cp -r ./static/aarch64-darwin/* .
          # Write build metadata unit for CI (overrides dev stub)
          BUILD_DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          GIT_SHA="$(git rev-parse --short HEAD)"
          mkdir -p units/misc
          cat > units/misc/buildinfo.pp <<EOF
          unit buildinfo;
          {\$mode objfpc}{\$H+}
          interface
          const
            BUILD_NUMBER = '${{ needs.version.outputs.build_number }}';
            BUILD_TAG    = 'build-${{ needs.version.outputs.build_number }}';
            BUILD_DATE   = '${BUILD_DATE}';
            GIT_SHA      = '${GIT_SHA}';
            GIT_BRANCH   = '${{ github.ref_name }}';
            CI           = True;
          implementation
          end.
          EOF
          # Build Trndi
          lazbuild externals/mORMot2/packages/lazarus/mormot2.lpk
          lazbuild --build-mode="No Ext (Release)" --ws=cocoa --cpu=aarch64 --os=darwin Trndi.lpi
          # Package zip & dmg
          mkdir -p artifacts
          cp Trndi artifacts/
          [ -d "lang" ] && cp -r lang artifacts/
          7z a -tzip Trndi-macos-silicon.zip ./artifacts/* >/dev/null
          chmod +x dist/macos.sh
          if [ -d "lang" ]; then cp -r lang dist/; fi
          (cd dist && ./macos.sh)
          mv dist/Trndi.dmg Trndi-macos-silicon.dmg

      # ===================== WINDOWS BUILDER =====================
      - name: Build on Windows
        if: matrix.os_target == 'windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          # Install curl (real) and 7-Zip via Chocolatey
          choco install curl 7zip -y
          # Download Lazarus installer via curl
          curl -L --fail -o lazarus-4.2.exe "https://sourceforge.net/projects/lazarus/files/Lazarus%20Windows%2064%20bits/Lazarus%204.2/lazarus-4.2-fpc-3.2.2-win64.exe/download"
          Start-Process '.\lazarus-4.2.exe' -ArgumentList '/VERYSILENT','/SP-','/NORESTART','/DIR=C:\Lazarus' -Wait
          # Prepare static libs & sources
          New-Item -ItemType Directory -Path .\static -Force | Out-Null
          curl -L --fail -o mormot2static.7z "https://github.com/synopse/mORMot2/releases/download/2.3.stable/mormot2static.7z"
          & 'C:\Program Files\7-Zip\7z.exe' x '.\mormot2static.7z' -o'.\static' -y | Out-Null
          git clone https://github.com/synopse/mORMot2.git externals/mORMot2
          xcopy .\static\x86_64-win64\*.* . /Y /E /I | Out-Null
          # Write build metadata unit for CI (overrides dev stub)
          $BUILD_DATE = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
          $GIT_SHA = (git rev-parse --short HEAD)
          New-Item -ItemType Directory -Path units\misc -Force | Out-Null
          @"
          unit buildinfo;
          {$mode objfpc}{$H+}
          interface
          const
            BUILD_NUMBER = '${{ needs.version.outputs.build_number }}';
            BUILD_TAG    = 'build-${{ needs.version.outputs.build_number }}';
            BUILD_DATE   = '$BUILD_DATE';
            GIT_SHA      = '$GIT_SHA';
            GIT_BRANCH   = '${{ github.ref_name }}';
            CI           = True;
          implementation
          end.
          "@ | Set-Content -Path "units\misc\buildinfo.pp" -Encoding UTF8
          # Build Trndi.exe
          & 'C:\Lazarus\lazbuild.exe' 'externals\mORMot2\packages\lazarus\mormot2.lpk'
          & 'C:\Lazarus\lazbuild.exe' --lazarusdir='C:\Lazarus' --build-mode='Extensions (Release)' 'Trndi.lpi'
          # Package ZIP
          New-Item -ItemType Directory -Path artifacts -Force | Out-Null
          Copy-Item '.\Trndi.exe' -Destination '.\artifacts\'
          if (Test-Path '.\lang') { Copy-Item '.\lang' -Destination '.\artifacts\lang' -Recurse }
          & 'C:\Program Files\7-Zip\7z.exe' a -tzip 'Trndi-windows-x64.zip' .\artifacts\* | Out-Null
          # Build Inno Setup installer
          choco install innosetup -y
          & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' '.\dist\windows_setup.iss'
          # Move the generated installer to the root for easier artifact upload
          Move-Item '.\dist\Output\TrndiSetup.exe' '.\TrndiSetup.exe'
          # Build NuGet package
          choco install nuget.commandline -y
          # Determine package version from Trndi.lpi (Major.Minor.<build>)
          [xml]$lpi = Get-Content 'Trndi.lpi'
          $MAJOR = $lpi.CONFIG.ProjectOptions.VersionInfo.MajorVersionNr.Value
          $MINOR = $lpi.CONFIG.ProjectOptions.VersionInfo.MinorVersionNr.Value
          if ([string]::IsNullOrEmpty($MAJOR)) { $MAJOR = "0" }
          if ([string]::IsNullOrEmpty($MINOR)) { $MINOR = "0" }
          $PKG_VERSION = "$MAJOR.$MINOR.${{ needs.version.outputs.build_number }}"
          Write-Host "Packaging version: $PKG_VERSION"
          # Update nuspec with actual version
          $nuspecContent = Get-Content 'dist\trndi.nuspec' -Raw
          $nuspecContent = $nuspecContent -replace 'VERSION_PLACEHOLDER', $PKG_VERSION
          $nuspecContent | Set-Content 'dist\trndi.nuspec' -Encoding UTF8
          # Pack the NuGet package
          & nuget pack 'dist\trndi.nuspec' -OutputDirectory '.'
          # Publish to GitHub Packages
          & nuget sources Add -Name "GitHub" -Source "https://nuget.pkg.github.com/slicke/index.json" -UserName slicke -Password ${{ secrets.GITHUB_TOKEN }}
          & nuget push trndi.*.nupkg -Source "GitHub" -SkipDuplicate

      # ===================== UPLOAD ARTIFACTS =====================
      - name: Upload Actions artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.upload_name }}
          path: |
            *.zip
            *.dmg
            *.nupkg
            TrndiSetup.exe
            artifacts/*.deb
            artifacts/*.rpm
          if-no-files-found: ignore

  # ===================== PUBLISH =====================
  publish:
    runs-on: ubuntu-latest
    needs: [version, build]
    # Only create/update releases on direct pushes to main (not on pull_request events).
    # This is defense-in-depth: we removed `pull_request` from the workflow triggers above,
    # and additionally ensure the publish job only runs for push events to main.
    if: ${{ always() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./release-files

      - name: Create or update GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          shopt -s nullglob globstar

          TAG="build-${{ needs.version.outputs.build_number }}"
          TITLE="Trndi build ${{ needs.version.outputs.build_number }}"
          echo "Publishing release $TAG"

          # Build release notes dynamically from actual artifact filenames (with descriptions)
          {
            echo "# Trndi Release ${TAG}"
            echo
            echo "> This is an automated build of Trndi's latest source code."
            echo

            # Linux amd64
            echo "### Linux (amd64 / x86_64)"
            echo "Linux computers running on amd64 processors (Extensions supported)"
            shopt -s nullglob globstar
            files=(./release-files/linux-amd64-build/*.zip)
            if [ ${#files[@]} -eq 0 ]; then
              echo "- No Linux (amd64) releases for this build -"
            else
              for f in "${files[@]}"; do
                echo "- $(basename "$f") — Portable binary + languages"
              done
            fi
            debs=(./release-files/linux-amd64-build/**/*.deb)
            if [ ${#debs[@]} -eq 0 ]; then
              echo "- No Debian/Ubuntu (amd64) installer for this build -"
            else
              for f in "${debs[@]}"; do
                echo "- $(basename "$f") — Ubuntu/Debian installer (amd64)"
              done
            fi
            rpms=(./release-files/linux-amd64-build/**/*.rpm)
            if [ ${#rpms[@]} -eq 0 ]; then
              echo "- No RPM (x86_64) installer for this build -"
            else
              for f in "${rpms[@]}"; do
                echo "- $(basename "$f") — Fedora/OpenSUSE installer (x86_64)"
              done
            fi
            echo

            # Linux arm64
            echo "### Linux (arm64 / aarch64)"
            echo "Linux computers running on arm64 processors, including Raspberry Pi"
            shopt -s nullglob globstar
            files=(./release-files/linux-arm64-build/*.zip)
            if [ ${#files[@]} -eq 0 ]; then
              echo "- No Linux (arm64) releases for this build -"
            else
              for f in "${files[@]}"; do
                echo "- $(basename "$f") — Portable binary + languages"
              done
            fi
            debs=(./release-files/linux-arm64-build/**/*.deb)
            if [ ${#debs[@]} -eq 0 ]; then
              echo "- No Debian/Ubuntu (arm64) installer for this build -"
            else
              for f in "${debs[@]}"; do
                echo "- $(basename "$f") — Ubuntu/Debian installer (arm64)"
              done
            fi
            rpms=(./release-files/linux-arm64-build/**/*.rpm)
            if [ ${#rpms[@]} -eq 0 ]; then
              echo "- No RPM (aarch64) installer for this build -"
            else
              for f in "${rpms[@]}"; do
                echo "- $(basename "$f") — Fedora/OpenSUSE installer (aarch64)"
              done
            fi
            echo

            # macOS Apple Silicon
            echo "### macOS (Apple Silicon)"
            echo "macOS computers with Apple processors"
            shopt -s nullglob
            files=(./release-files/macos-arm64-build/*.zip)
            if [ ${#files[@]} -eq 0 ]; then
              echo "- No macOS (Apple Silicon) releases for this build -"
            else
              for f in "${files[@]}"; do
                echo "- $(basename "$f") — Portable binary + languages"
              done
            fi
            dmgs=(./release-files/macos-arm64-build/*.dmg)
            if [ ${#dmgs[@]} -eq 0 ]; then
              echo "- No macOS (.dmg) release for this build -"
            else
              for f in "${dmgs[@]}"; do
                echo "- $(basename "$f") — Application (\`.app\`) bundle for drag‑and‑drop install"
              done
            fi
            echo
            echo "#### Special requirements for macOS"
            echo "- Unzip / open the file"
            echo "- In Terminal, run: \`xattr -c /path/to/Trndi\` (or \`.app\` bundle)"
            echo "- Replace \`/path/to/...\` with the actual path"
            echo "- Now you can launch normally"
            echo

            # Windows (x64)
            echo "### Windows (x64)"
            echo "Windows computers (Extensions supported)"
            # If no ZIPs were produced, print a fallback line so the release notes
            # still mention the platform. We use an array to detect an empty glob.
            shopt -s nullglob
            files=(./release-files/windows-x64-build/*.zip)
            if [ ${#files[@]} -eq 0 ]; then
              echo "- No Windows (x64) releases for this build -"
            else
              for f in "${files[@]}"; do
                echo "- $(basename "$f") — Portable binary + languages"
              done
            fi
            exes=(./release-files/windows-x64-build/*.exe)
            if [ ${#exes[@]} -eq 0 ]; then
              echo "- No Windows installer for this build -"
            else
              for f in "${exes[@]}"; do
                echo "- $(basename "$f") — Windows installer (recommended)"
              done
            fi
            nupkgs=(./release-files/windows-x64-build/*.nupkg)
            if [ ${#nupkgs[@]} -eq 0 ]; then
              echo "- No NuGet package for this build -"
            else
              for f in "${nupkgs[@]}"; do
                echo "- $(basename "$f") — Chocolatey package (\`choco install $(basename "$f")\`)"
              done
            fi
          } > RELEASE_NOTES.md

          # Create release if missing
          if ! gh release view "$TAG" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
            gh release create "$TAG" --title "$TITLE" --notes-file RELEASE_NOTES.md --repo "$GITHUB_REPOSITORY"
          fi

          # Upload all files from all artifacts (files only, no directories)
          find ./release-files -type f -print0 | xargs -0 gh release upload "$TAG" --clobber --repo "$GITHUB_REPOSITORY"