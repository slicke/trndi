name: Build Trndi for Windows x64

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: windows-latest

    permissions:
      contents: write

    steps:
      # 1. Check out repository
      - name: Check out repository
        uses: actions/checkout@v3

      # 2. Cache Lazarus Installation
      - name: Restore Lazarus Cache
        id: cache-lazarus
        uses: actions/cache@v3
        with:
          path: C:\Lazarus
          key: lazarus-4.0.0-installation

      # 3. Install Lazarus 4.0.0
      - name: Install Lazarus 4.0.0
        run: |
          if (!(Test-Path "C:\Lazarus\lazbuild.exe")) {
            Invoke-WebRequest -Uri 'https://download.lazarus-ide.org/Lazarus%20Windows%2064%20bits/Lazarus%204.0/lazarus-4.0-fpc-3.2.2-win64.exe' -OutFile 'lazarus-4.0.exe' -ErrorAction Stop
            Start-Process -FilePath 'lazarus-4.0.exe' -ArgumentList '/VERYSILENT', '/DIR=C:\Lazarus' -Wait -ErrorAction Stop
          }
        shell: pwsh

      # 4. Verify Lazarus Installation
      - name: Verify Lazarus Installation
        run: |
          Get-ChildItem -Path C:\Lazarus -Recurse
        shell: pwsh

      # 4b. Save Lazarus Cache
      - name: Save Lazarus Cache
        uses: actions/cache/save@v3
        with:
          path: C:\Lazarus
          key: lazarus-4.0.0-installation        

      # 4c. Install 7-Zip
      - name: Install 7-Zip
        run: |
          choco install 7zip -y
        shell: pwsh

      # 4d. Create ../static - if not exists
      - name: Create static directory
        run: |
          if (!(Test-Path "../static")) {
            New-Item -ItemType Directory -Path "../static"
          }
        shell: pwsh

      # 5. Cache Static Libraries
      - name: Restore Static Cache
        id: cache-static
        uses: actions/cache@v3
        with:
          path: ../static
          key: static-libraries

      # 6. Download and Extract Static Libraries if not cached
      - name: Download and Extract Static Libraries
        if: steps.cache-static.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest -Uri 'https://github.com/synopse/mORMot2/releases/download/2.3.stable/mormot2static.7z' -OutFile 'mormot2static.7z' -ErrorAction Stop
          mkdir ../static -Force
          & 'C:\Program Files\7-Zip\7z.exe' x 'mormot2static.7z' -o'../static' -y
        shell: pwsh

      - name: Save Static Libraries Cache
        uses: actions/cache/save@v3
        with:
          path: ../static
          key: static-libraries        

      # 7a. Log Current Directory
      - name: Log Current Directory
        run: |
          Write-Host "Current Directory: $(Get-Location)"
        shell: pwsh

      # 7b. List Parent Static Directory
      - name: List Parent Static Directory
        run: |
          Get-ChildItem '..\static' -Recurse
        shell: pwsh

      # 7c. Verify Static Libraries
      - name: Verify Static Libraries
        run: |
          Get-ChildItem -Path "${{ github.workspace }}\..\static\x86_64-win64" -Recurse
        shell: pwsh

      # 8. Copy Static Libraries to Program Folder
      - name: Copy Static Libraries
        run: |
          xcopy ..\static\x86_64-win64\*.* . /Y /E /I
        shell: cmd

      # 9. Restore mORMot2 Cache
      - name: Restore mORMot2 Cache
        id: cache-mormot2
        uses: actions/cache@v3
        with:
          path: externals/mORMot2
          key: mormot2-repository

      # 10. Clone mORMot2 Repository if cache is missing
      - name: Clone mORMot2 Repository
        if: steps.cache-mormot2.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/synopse/mORMot2.git externals/mORMot2
        shell: pwsh

      # 11. Verify mORMot2 Clone
      - name: Verify mORMot2 Clone
        run: |
          dir externals\mORMot2 /s
        shell: cmd

      # 12. Build mORMot2 Package
      - name: Build mORMot2 Package
        run: |
          & 'C:\Lazarus\lazbuild.exe' 'externals\mORMot2\packages\lazarus\mormot2.lpk'
        shell: pwsh

      # 13. Build Trndi.lpr
      - name: Build Trndi.lpr
        run: |
          & 'C:\Lazarus\lazbuild.exe' --lazarusdir='C:\Lazarus' --build-mode='Extensions (Release)' 'Trndi.lpr'
        shell: pwsh

      # 14. Create artifact directory
      - name: Create artifacts directory
        run: |
          New-Item -ItemType Directory -Path artifacts -Force
          Copy-Item Trndi.exe artifacts/
        shell: pwsh

      # 15. Package artifacts
      - name: Package artifacts
        run: |
          7z a -tzip Trndi-developer-build-windows.zip ./artifacts/*
        shell: pwsh

      # 16. Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: Trndi-developer-build-windows.zip
          tag_name: v${{ github.run_number }}-win
          name: Windows Build ${{ github.run_number }}
          body: |
            Windows developer build from commit ${{ github.sha }}.
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}