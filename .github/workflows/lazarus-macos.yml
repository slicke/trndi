name: Build Trndi for macOS ARM64

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14  # macOS with Apple Silicon

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Command Line Developer Tools
        run: |
          sudo xcode-select --install || true
          sudo xcodebuild -license accept || true
      
      - name: Create profile directory if needed
        run: mkdir -p /Users/runner
        
      - name: Set up MacPorts environment
        run: |
            echo 'export PATH=/opt/local/bin:/opt/local/sbin:$PATH' > /Users/runner/.profile
            source /Users/runner/.profile
            echo "PATH=$PATH" >> $GITHUB_ENV

      - name: Install MacPorts
        run: |
          echo "Installing MacPorts..."
          # Download the MacPorts pkg installer for Sonoma
          curl -L -o macports.pkg "https://github.com/macports/macports-base/releases/download/v2.8.1/MacPorts-2.8.1-14-Sonoma.pkg"
          
          # Install MacPorts
          sudo installer -pkg macports.pkg -target /
          
          # Add MacPorts to PATH
          echo "/opt/local/bin:/opt/local/sbin" >> $GITHUB_PATH
          
          # Verify installation
          source ~/.profile || true
          which port || echo "MacPorts not found in PATH"
          
          # Update MacPorts
          sudo port selfupdate

      - name: Install FPC and Lazarus via MacPorts
        run: |
          echo "Installing FPC and Lazarus via MacPorts..."
          sudo port install fpc
          sudo port install lazarus
          
          # Verify installations
          echo "FPC version:"
          fpc -iV || echo "FPC not found in PATH"
          
          echo "MacPorts install locations:"
          sudo port installed | grep -E 'fpc|lazarus'
          
          echo "Lazarus binaries:"
          find /opt/local -name "lazbuild" -type f
          
          # Create symlink to make lazbuild easier to access
          sudo ln -sf $(find /opt/local -name "lazbuild" -type f | head -1) /usr/local/bin/lazbuild || true
          
          # Add to PATH
          echo "/opt/local/share/lazarus/bin" >> $GITHUB_PATH
          
          # Check access
          which lazbuild || echo "lazbuild not found in PATH"

      - name: Setup build environment
        run: |
          # Check for available compilers
          echo "Available compilers:"
          ls -la /opt/local/bin/fpc*
          ls -la /opt/local/lib/fpc/
          
          # Check for lazarus version
          echo "Lazarus installation:"
          find /opt/local -name "lazarus*" -type d
          
          # Get and set actual executable paths
          FPC_PATH=$(which fpc)
          LAZBUILD_PATH=$(find /opt/local -name "lazbuild" -type f | head -1)
          
          echo "FPC path: $FPC_PATH"
          echo "LazbBuild path: $LAZBUILD_PATH"
          
          # Set for use in subsequent steps
          echo "FPC=$FPC_PATH" >> $GITHUB_ENV
          echo "LAZBUILD=$LAZBUILD_PATH" >> $GITHUB_ENV
          
          # Create necessary directories
          mkdir -p $HOME/.lazarus/lib/units/aarch64-darwin

      - name: List project files
        run: |
          echo "Current directory structure:"
          ls -la
          echo "Looking for .lpr or .lpi files:"
          find . -name "*.lpr" -o -name "*.lpi"

      - name: Remove mormot2 dependency
        run: |
          echo "Removing mormot2 dependency from project file(s)..."
          find . -name "*.lpi" -type f -exec sed -i '' '/<Item>.*<PackageName Value="mormot2"\/>/,/<\/Item>/d' {} \;
          echo "Removed mormot2 package references from project files"
          
          # Check for other mormot2 references
          echo "Checking for other mormot2 references:"
          grep -r "mormot2" --include="*.lpi" . || echo "No other mormot2 references found"

      - name: Build project
        run: |
          # Determine main project file
          MAIN_PROJECT=$(find . -name "*.lpi" | head -1)
          if [ -z "$MAIN_PROJECT" ]; then
            MAIN_PROJECT=$(find . -name "*.lpr" | head -1)
          fi
          
          if [ -z "$MAIN_PROJECT" ]; then
            echo "No Lazarus project files found!"
            exit 1
          fi
          
          echo "Building project: $MAIN_PROJECT"
          
          # Use LAZBUILD environment variable
          if [ -n "$LAZBUILD" ]; then
            echo "Using lazbuild from environment: $LAZBUILD"
            
            # Build the project with appropriate flags for ARM64 macOS
            "$LAZBUILD" --build-mode="Release" --cpu=aarch64 --os=darwin --widgetset=cocoa "$MAIN_PROJECT"
          else
            echo "LAZBUILD environment variable not set"
            exit 1
          fi
          
          # Find built applications
          echo "Looking for built application(s):"
          find . -name "*.app" -type d
          
          # Remove quarantine attribute if any app files were created
          find . -name "*.app" -exec xattr -drv com.apple.quarantine {} \; || echo "No .app files found"

      - name: Package application
        run: |
          # Find the built app
          APP_PATH=$(find . -name "*.app" -type d | head -1)
          
          if [ -n "$APP_PATH" ]; then
            # Create output directory
            mkdir -p ./dist
            cp -R "$APP_PATH" ./dist/
            
            # Create zip archive
            cd ./dist
            zip -r ../Trndi-macos-arm64.zip ./*
            cd ..
            echo "Application packaged successfully"
          else
            echo "No .app files found to package"
            mkdir -p ./dist
            echo "Build failed - no application found" > ./dist/build-failed.txt
            find . -name "*.o" -o -name "*.ppu" > ./dist/compiled-files.txt
            cd ./dist
            zip -r ../Trndi-build-failed.zip ./*
            cd ..
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Trndi-macOS-arm64
          path: ./Trndi-macos-arm64.zip
          retention-days: 7
        if: success()

      - name: Upload build failure info
        uses: actions/upload-artifact@v4
        with:
          name: Trndi-build-failure-info
          path: ./Trndi-build-failed.zip
          retention-days: 7
        if: failure()
