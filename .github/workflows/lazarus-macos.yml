name: Build Trndi for macOS ARM64

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14  # macOS with Apple Silicon

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Command Line Developer Tools
        run: |
          sudo xcode-select --install || true
          sudo xcodebuild -license accept || true

      - name: Install MacPorts
        run: |
          echo "Installing MacPorts..."
          # Download the MacPorts pkg installer for Sonoma
          curl -L -o macports.pkg "https://github.com/macports/macports-base/releases/download/v2.8.1/MacPorts-2.8.1-14-Sonoma.pkg"
          
          # Install MacPorts
          sudo installer -pkg macports.pkg -target /
          
          # Add MacPorts to PATH directly without relying on profile
          echo "/opt/local/bin:/opt/local/sbin" >> $GITHUB_PATH
          
          # Verify installation
          echo "MacPorts installation check:"
          which port || echo "MacPorts not found in PATH"
          port version || echo "MacPorts command not working"
          
          # Update MacPorts
          sudo port selfupdate || echo "Failed to update MacPorts"

      - name: Detailed FPC Installation Diagnostics
        run: |
          echo "System architecture:"
          uname -a
          
          echo "MacPorts package search:"
          port list fpc || echo "No FPC packages found in MacPorts"
          port list lazarus || echo "No Lazarus packages found in MacPorts"
          
          echo "Install FPC with details:"
          sudo port install fpc +universal
          
          echo "FPC installation details (post-install):"
          port installed fpc || echo "FPC not installed"
          
          echo "FPC binary path:"
          which fpc || echo "FPC not found in PATH"
          
          echo "FPC version:"
          fpc -iV || echo "FPC command failed"
          
          echo "FPC details:"
          fpc -i || echo "Failed to get FPC details"
          
          echo "FPC installation directories:"
          find /opt/local -name "fpc*" -type d || echo "No fpc directories found"
          find /opt/local -name "fpc.cfg" || echo "No fpc.cfg found"
          
          echo "Compiler units location:"
          ls -la /opt/local/lib || echo "No /opt/local/lib directory"
          # Create FPC lib directory if missing
          sudo mkdir -p /opt/local/lib/fpc
          
          echo "Create symbolic links if needed:"
          if [ ! -d "/opt/local/lib/fpc" ]; then
            FPC_DIR=$(find /opt/local -name "fpc" -type d | grep -v "bin" | head -1)
            if [ -n "$FPC_DIR" ]; then
              echo "Found FPC dir: $FPC_DIR"
              sudo ln -sf "$FPC_DIR" /opt/local/lib/fpc
            fi
          fi

      - name: Install and diagnose Lazarus
        run: |
          echo "Install Lazarus:"
          sudo port install lazarus +universal
          
          echo "Lazarus installation details:"
          port installed lazarus || echo "Lazarus not installed"
          
          echo "Lazarus directories:"
          find /opt/local -name "lazarus*" -type d || echo "No Lazarus directories found"
          
          echo "Lazarus binaries:"
          find /opt/local -name "lazbuild" -type f || echo "No lazbuild binary found"
          
          # Create symlink for lazbuild
          LAZBUILD_PATH=$(find /opt/local -name "lazbuild" -type f | head -1)
          if [ -n "$LAZBUILD_PATH" ]; then
            echo "Found lazbuild: $LAZBUILD_PATH"
            sudo ln -sf "$LAZBUILD_PATH" /usr/local/bin/lazbuild
          else
            echo "lazbuild not found, cannot create symlink"
          fi
          
          # Check lazbuild
          which lazbuild || echo "lazbuild not found in PATH"
          lazbuild --version || echo "lazbuild command failed"

      - name: Setup FPC configuration
        run: |
          echo "Setting up FPC configuration..."
          # Get FPC version
          FPC_VERSION=$(fpc -iV | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' || echo "3.2.2")
          echo "Detected FPC version: $FPC_VERSION"
          
          # Create directories
          sudo mkdir -p /opt/local/lib/fpc/$FPC_VERSION
          sudo mkdir -p /opt/local/etc/fpc.cfg.d
          
          # Create basic fpc.cfg if it doesn't exist
          if [ ! -f "/opt/local/etc/fpc.cfg" ]; then
            echo "Creating basic fpc.cfg..."
            echo "-Fu/opt/local/lib/fpc/$FPC_VERSION/units/*" | sudo tee /opt/local/etc/fpc.cfg
            echo "-Fl/opt/local/lib" | sudo tee -a /opt/local/etc/fpc.cfg
            echo "-Fl/usr/lib" | sudo tee -a /opt/local/etc/fpc.cfg
            echo "-FD/opt/local/bin" | sudo tee -a /opt/local/etc/fpc.cfg
          fi
          
          # Check if fpc.cfg is properly set up
          echo "FPC configuration file contents:"
          cat /opt/local/etc/fpc.cfg || echo "No fpc.cfg found"
          
          # Create FPC environment variables for the build
          echo "FPC_UNITS_PATH=/opt/local/lib/fpc/$FPC_VERSION/units" >> $GITHUB_ENV

      - name: List project files
        run: |
          echo "Current directory structure:"
          ls -la
          echo "Looking for .lpr or .lpi files:"
          find . -name "*.lpr" -o -name "*.lpi"
          
          # Create output directory for Lazarus
          mkdir -p $HOME/.lazarus
          mkdir -p $HOME/.config/lazarus

      - name: Build project using FPC directly
        run: |
          # Find the main .lpr file
          MAIN_PROJECT=$(find . -name "*.lpr" | head -1)
          
          if [ -z "$MAIN_PROJECT" ]; then
            echo "No Pascal source files found!"
            exit 1
          fi
          
          echo "Building project using FPC directly: $MAIN_PROJECT"
          
          # Build with FPC directly
          fpc -Tdarwin -Paarch64 -O2 "$MAIN_PROJECT"
          
          # Check compilation result
          ls -la $(dirname "$MAIN_PROJECT")
          
          # Find built binary
          BINARY_NAME=$(basename "$MAIN_PROJECT" .lpr)
          echo "Looking for binary: $BINARY_NAME"
          find . -name "$BINARY_NAME" -type f -perm +111

      - name: Package compiled binary
        run: |
          # Find the compiled binary
          MAIN_PROJECT=$(find . -name "*.lpr" | head -1)
          BINARY_NAME=$(basename "$MAIN_PROJECT" .lpr)
          BINARY_PATH=$(find . -name "$BINARY_NAME" -type f -perm +111 | head -1)
          
          if [ -n "$BINARY_PATH" ]; then
            # Create output directory
            mkdir -p ./dist
            cp "$BINARY_PATH" ./dist/
            
            # Create zip archive
            cd ./dist
            zip -r ../Trndi-macos-arm64.zip ./*
            cd ..
            echo "Binary packaged successfully"
          else
            echo "No compiled binary found to package"
            mkdir -p ./dist
            echo "Build failed - no binary found" > ./dist/build-failed.txt
            find . -name "*.o" -o -name "*.ppu" > ./dist/compiled-files.txt
            cd ./dist
            zip -r ../Trndi-build-failed.zip ./*
            cd ..
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Trndi-macOS-arm64
          path: ./Trndi-macos-arm64.zip
          retention-days: 7
        if: success()

      - name: Upload build failure info
        uses: actions/upload-artifact@v4
        with:
          name: Trndi-build-failure-info
          path: ./Trndi-build-failed.zip
          retention-days: 7
        if: failure()
