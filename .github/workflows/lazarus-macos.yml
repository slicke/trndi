
name: Build Trndi for macOS ARM64 (Based on Windows Workflow)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-macos-arm64:
    runs-on: macos-14 # macOS with Apple Silicon

    permissions:
      contents: write # Required for creating releases

    steps:
      # 1. Check out repository
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Cache MacPorts and Lazarus Installation
      - name: Restore Lazarus and MacPorts Cache
        id: cache-lazarus-macports
        uses: actions/cache@v3
        with:
          path: |
            /opt/local
          key: ${{ runner.os }}-macports-lazarus-fpc-v1-${{ hashFiles('**/trndi-hashed-ports') }} # Consider a more specific key or use a fixed version key

      # 3. Install Prerequisites and Lazarus (if not cached)
      - name: Install Command Line Developer Tools
        if: steps.cache-lazarus-macports.outputs.cache-hit != 'true'
        run: |
          echo "Installing Xcode Command Line Tools..."
          sudo xcode-select --install || echo "Xcode tools already installed or install command initiated."
          # Attempt to accept the license; this might require user interaction locally but often works in CI
          sudo xcodebuild -license accept || echo "Failed to accept Xcode license automatically."
          
      - name: Install MacPorts
        if: steps.cache-lazarus-macports.outputs.cache-hit != 'true'
        run: |
          echo "Installing MacPorts..."
          curl -L -o macports.pkg "https://github.com/macports/macports-base/releases/download/v2.8.1/MacPorts-2.8.1-14-Sonoma.pkg"
          sudo installer -pkg macports.pkg -target /
          echo "/opt/local/bin:/opt/local/sbin" | sudo tee -a /etc/paths # More robust way to add to PATH system-wide
          export PATH="/opt/local/bin:/opt/local/sbin:$PATH" # For current session
          sudo port selfupdate

      - name: Install FPC and Lazarus via MacPorts
        if: steps.cache-lazarus-macports.outputs.cache-hit != 'true'
        run: |
          export PATH="/opt/local/bin:/opt/local/sbin:$PATH" # Ensure port is in PATH
          echo "Installing FPC..."
          sudo port install fpc +universal
          echo "Installing Lazarus..."
          sudo port install lazarus +universal

      # 4. Verify Lazarus Installation
      - name: Verify Lazarus Installation
        run: |
          export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
          echo "--- Verifying MacPorts and Lazarus ---"
          echo "which port: $(which port)"
          echo "port version: $(port version || echo 'port command not found')"
          echo "FPC version: $(fpc -iV || echo 'fpc command not found')"
          echo "lazbuild path: $(which lazbuild || echo 'lazbuild not found')"
          lazbuild --version || echo "lazbuild --version failed"
          echo "Listing /opt/local/share/lazarus:"
          ls -la /opt/local/share/lazarus || echo "/opt/local/share/lazarus not found"
          echo "--- Verification Done ---"

      # 4c. Install p7zip (for 7-Zip compatibility)
      - name: Install p7zip
        run: |
          export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
          sudo port install p7zip

      # --- mORMot2 Related Steps (Mirroring Windows Workflow) ---
      # If mORMot2 is NOT needed for macOS, remove/comment out steps 4d through 12.

      # 4d. Create ../static directory (if not exists)
      - name: Create static directory for mORMot2
        run: mkdir -p ../static

      # 5. Cache Static Libraries for mORMot2
      - name: Restore mORMot2 Static Libraries Cache
        id: cache-static-mormot2
        uses: actions/cache@v3
        with:
          path: ../static
          key: ${{ runner.os }}-mormot2-static-libs-arm64-v1 # Adjust key as needed

      # 6. Download and Extract mORMot2 Static Libraries if not cached
      - name: Download and Extract mORMot2 Static Libraries (macOS ARM64)
        if: steps.cache-static-mormot2.outputs.cache-hit != 'true'
        run: |
          echo "Downloading mORMot2 static libraries for macOS ARM64..."
          # IMPORTANT: Replace with the correct URL for macOS ARM64 static libraries
          curl -L -o mormot2static_macos_arm64.7z 'https://github.com/synopse/mORMot2/releases/download/2.3.stable/mormot2static.7z'
          7z x mormot2static_macos_arm64.7z -o../static -y
          echo "Extraction complete."

      # 7a. Log Current Directory (for context)
      - name: Log Current Directory
        run: pwd

      # 7b. List Parent Static Directory
      - name: List Parent Static Directory Contents
        run: ls -R ../static || echo "../static directory not found or empty."

      # 7c. Verify Static Libraries (Adjust path as needed)
      - name: Verify mORMot2 Static Libraries
        run: ls -R ../static/aarch64-darwin || echo "Static library path for aarch64-darwin not found."

      # 8. Copy Static Libraries to Program Folder (Adjust path as needed)
      - name: Copy mORMot2 Static Libraries
        run: |
          echo "Copying static libraries..."
          if [ -d "../static/aarch64-darwin" ]; then
            cp -R ../static/aarch64-darwin/* .
            echo "Static libraries copied."
          else
            echo "Static library source directory '../static/aarch64-darwin' not found. Skipping copy."
          fi

      # 9. Restore mORMot2 Source Cache
      - name: Restore mORMot2 Source Cache
        id: cache-mormot2-repo
        uses: actions/cache@v3
        with:
          path: externals/mORMot2
          key: ${{ runner.os }}-mormot2-repo-v1-${{ hashFiles('**/your-project-identifier-for-cache') }}

      # 10. Clone mORMot2 Repository if cache is missing
      - name: Clone mORMot2 Repository
        if: steps.cache-mormot2-repo.outputs.cache-hit != 'true'
        run: |
          mkdir -p externals
          git clone https://github.com/synopse/mORMot2.git externals/mORMot2

      # 11. Verify mORMot2 Clone
      - name: Verify mORMot2 Clone
        run: ls -R externals/mORMot2 || echo "externals/mORMot2 directory not found."

      # 12. Build mORMot2 Package
      - name: Build mORMot2 Package
        run: |
          export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
          if [ -f "externals/mORMot2/packages/lazarus/mormot2.lpk" ]; then
            lazbuild externals/mORMot2/packages/lazarus/mormot2.lpk
          else
            echo "mORMot2 LPK file not found. Skipping mORMot2 package build."
          fi
      # --- End of mORMot2 Related Steps ---

      # 13. Build Trndi.lpr (or your project file)
      - name: Build Trndi Project
        run: |
          export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
          # Ensure Lazarus config directory exists, though MacPorts setup might handle this.
          # mkdir -p "$HOME/.config/lazarus"
          # mkdir -p "$HOME/.lazarus"
          
          echo "Building project: Trndi.lpr"
          lazbuild --lazarusdir=/opt/local/share/lazarus \
                   --build-mode="No Ext (Release)" \
                   --ws=cocoa \
                   --cpu=aarch64 \
                   --os=darwin \
                   Trndi.lpr # Or Trndi.lpi if that's your project file
          # Check for common output locations
          ls -la Trndi.app || ls -la Trndi || echo "Build output (Trndi.app or Trndi) not found."


      # 14. Create artifact directory and copy build output
      - name: Create artifacts directory
        run: |
          mkdir -p artifacts
          if [ -d "Trndi.app" ]; then
            echo "Found Trndi.app, copying to artifacts..."
            rm -rf Trndi.app/Contents/MacOS/Trndi
            cp -rf Trndi  Trndi.app/Contents/MacOS/Trndi
            cp -rf lang  Trndi.app/Contents/MacOS/lang
            cp -R Trndi.app artifacts/
          elif [ -f "Trndi" ]; then
            echo "Found Trndi executable, copying to artifacts..."
            cp Trndi artifacts/
          else
            echo "Build output (Trndi.app or Trndi) not found!"
            exit 1
          fi
          ls -R artifacts

      # 15. Package artifacts
      - name: Package artifacts
        run: |
          cd artifacts
          zip -r ../Trndi-developer-build-macos-arm64.zip ./*
          cd ..
          echo "Artifacts packaged into Trndi-developer-build-macos-arm64.zip"

      # 16. Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: Trndi-developer-build-macos-arm64.zip
          tag_name: v${{ github.run_number }}-mac
          name: macOS Build ${{ github.run_number }}
          body: |
            macOS developer build from commit ${{ github.sha }}.
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

