name: Build for macOS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-macos:
    strategy:
      matrix:
        platform: [intel, arm64]
        include:
          - platform: intel
            fpc-target: x86_64-darwin
            artifact-name: macos-intel
            build-flags: ""
            
          - platform: arm64
            fpc-target: aarch64-darwin
            artifact-name: macos-arm64
            build-flags: "--cpu=aarch64 --os=darwin"
            
    runs-on: macos-latest
    permissions:
      contents: write

    steps:
      # 1. Check out repository
      - name: Check out repository
        uses: actions/checkout@v3

      # 2. Cache Lazarus Installation
      - name: Restore Lazarus Cache
        id: cache-lazarus
        uses: actions/cache@v3
        with:
          path: /Applications/Lazarus
          key: lazarus-4.0rc3-macos-${{ matrix.platform }}-installation

      # 3. Install Lazarus 4.0 RC3
      - name: Install Lazarus 4.0 RC3
        if: steps.cache-lazarus.outputs.cache-hit != 'true'
        run: |
          curl -L 'https://download.lazarus-ide.org/Lazarus%20macOS%20x86-64/Lazarus%204.0RC3/lazarus-4.0RC3-fpc-3.2.2-x86_64-darwin.dmg' -o 'lazarus-4.0RC3.dmg'
          hdiutil attach lazarus-4.0RC3.dmg
          cp -R '/Volumes/Lazarus' '/Applications/'
          hdiutil detach '/Volumes/Lazarus'
        shell: bash

      # 4. Verify Lazarus Installation
      - name: Verify Lazarus Installation
        run: ls -la /Applications/Lazarus
        shell: bash

      # 5. Install necessary tools
      - name: Install tools
        run: brew install p7zip
        shell: bash

      # 6. Create static directory if not exists
      - name: Create static directory
        run: mkdir -p ../static
        shell: bash

      # 7. Cache Static Libraries
      - name: Restore Static Cache
        id: cache-static
        uses: actions/cache@v3
        with:
          path: ../static
          key: static-libraries-macos-${{ matrix.platform }}

      # 8. Download and Extract Static Libraries if not cached
      - name: Download and Extract Static Libraries
        if: steps.cache-static.outputs.cache-hit != 'true'
        run: |
          curl -L 'https://github.com/synopse/mORMot2/releases/download/2.3.stable/mormot2static.7z' -o 'mormot2static.7z'
          7z x 'mormot2static.7z' -o../static -y
        shell: bash

      # 9. Copy Static Libraries to Program Folder
      - name: Copy Static Libraries
        run: cp -R ../static/${{ matrix.fpc-target }}/* .
        shell: bash

      # 10. Restore mORMot2 Cache
      #- name: Restore mORMot2 Cache
      #  id: cache-mormot2
      #  uses: actions/cache@v3
      #  with:
      #    path: externals/mORMot2
      #    key: mormot2-repository-macos-${{ matrix.platform }}

      # 11. Clone mORMot2 Repository if cache is missing
      #- name: Clone mORMot2 Repository
      #  if: steps.cache-mormot2.outputs.cache-hit != 'true'
      #  run: git clone https://github.com/synopse/mORMot2.git externals/mORMot2
      #  shell: bash

      # 12. Build mORMot2 Package
      #- name: Build mORMot2 Package
      #  run: |
      #    /Applications/Lazarus/lazbuild externals/mORMot2/packages/lazarus/mormot2.lpk ${{ matrix.build-flags }}
      #  shell: bash

      # 13. Build Trndi.lpr
      - name: Build Trndi.lpr
        run: |
          /Applications/Lazarus/lazbuild --lazarusdir='/Applications/Lazarus' --build-mode='No Ext (Release)' ${{ matrix.build-flags }} 'Trndi.lpr'
        shell: bash

      # 14. Create artifact directory
      - name: Create artifacts directory
        run: |
          mkdir -p artifacts
          cp Trndi artifacts/
        shell: bash

      # 15. Package artifacts
      - name: Package artifacts
        run: |
          7z a -tzip Trndi-developer-build-${{ matrix.artifact-name }}.zip ./artifacts/*
        shell: bash

      # 16. Create GitHub Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: Trndi-developer-build-${{ matrix.artifact-name }}.zip
          tag_name: v${{ github.run_number }}-mac-${{ matrix.platform }}
          name: macOS ${{ matrix.platform }} Build ${{ github.run_number }}
          body: |
            macOS ${{ matrix.platform }} developer build from commit ${{ github.sha }}.
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
