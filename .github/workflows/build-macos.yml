name: macOS Builder

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: trndi-build-macos-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build macOS (arm64)
    runs-on: macos-14
    env:
      PPC_CONFIG_PATH: /opt/local/libexec/fpc/etc
      MORMOT2_TAG: 2.3.stable      

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install MacPorts (latest for OS)
        shell: bash
        run: |
          set -euo pipefail
          OSMAJOR="$(sw_vers -productVersion | tr -d '\r' | cut -d. -f1)"
          case "$OSMAJOR" in
            14) OSNAME="14-Sonoma" ;;
            13) OSNAME="13-Ventura" ;;
            12) OSNAME="12-Monterey" ;;
            11) OSNAME="11-BigSur" ;;
            *) echo "Unsupported macOS major version: ${OSMAJOR}" >&2; exit 1 ;;
          esac
          GH_API="https://api.github.com/repos/macports/macports-base/releases"
          AUTH_HEADER=(-H "Accept: application/vnd.github+json")
          if [ -n "${GITHUB_TOKEN:-}" ]; then AUTH_HEADER+=(-H "Authorization: Bearer ${GITHUB_TOKEN}"); fi
          echo "Resolving latest MacPorts pkg for ${OSNAME}..."
          PKG_URL="$(
            curl -fsSL "${AUTH_HEADER[@]}" "${GH_API}/latest" \
            | OSNAME="${OSNAME}" python3 -c 'import sys,json,os; name=os.environ.get("OSNAME",""); d=json.load(sys.stdin); print(next((a.get("browser_download_url","") for a in d.get("assets",[]) if a.get("browser_download_url","").endswith(f"-{name}.pkg")), ""), end="")'
          )" || PKG_URL=""
          if [ -z "${PKG_URL}" ]; then
            PKG_URL="$(
              curl -fsSL "${AUTH_HEADER[@]}" "${GH_API}" \
              | OSNAME="${OSNAME}" python3 -c 'import sys,json,os; name=os.environ.get("OSNAME",""); rels=json.load(sys.stdin); urls=[a.get("browser_download_url","") for r in rels for a in r.get("assets",[]) if a.get("browser_download_url","").endswith(f"-{name}.pkg")]; print(urls[0] if urls else "", end="")'
            )" || PKG_URL=""
          fi
          if [ -z "${PKG_URL}" ]; then
            PKG_URL="$(curl -fsSL https://www.macports.org/install.php | grep -Eo "https://[^\"[:space:]]*MacPorts-[0-9.]+-${OSNAME}\.pkg" | head -n1 || true)"
          fi
          [ -n "${PKG_URL}" ] || { echo "Failed to resolve MacPorts pkg URL for ${OSNAME}." >&2; exit 1; }
          curl -fsSL -o MacPorts.pkg "${PKG_URL}"
          sudo installer -pkg MacPorts.pkg -target /

      - name: Install Lazarus toolchain via MacPorts
        shell: bash
        run: |
          set -euo pipefail
          export PATH="/opt/local/libexec/fpc/bin:/opt/local/bin:/opt/local/sbin:$PATH"
          sudo /opt/local/bin/port -v selfupdate
          sudo /opt/local/bin/port -N install fpc lazarus p7zip
          command -v lazbuild || true

      - name: Prepare static libs and sources
        shell: bash
        run: |
          set -euo pipefail
          export PATH="/opt/local/libexec/fpc/bin:/opt/local/bin:/opt/local/sbin:$PATH"

          # Download prebuilt static libraries for the specified tag
          curl -fsSL -A "Mozilla/5.0 GitHubActions" -o mormot2static.7z \
            "https://github.com/synopse/mORMot2/releases/download/${MORMOT2_TAG}/mormot2static.7z"
          mkdir -p ./static
          7z x mormot2static.7z -o./static -y >/dev/null

          # Clone mORMot2 at the same tag
          git clone --branch "$MORMOT2_TAG" --depth 1 https://github.com/synopse/mORMot2.git externals/mORMot2

          # Verify static libs exist
          test -d ./static/aarch64-darwin || { echo "Expected static/aarch64-darwin not found" >&2; exit 1; }

          # Copy platform-specific static libs
          cp -r ./static/aarch64-darwin/* .

      - name: Build
        shell: bash
        run: |
          set -euo pipefail
          export PATH="/opt/local/libexec/fpc/bin:/opt/local/bin:/opt/local/sbin:$PATH"
          lazbuild externals/mORMot2/packages/lazarus/mormot2.lpk
          lazbuild --build-mode="No Ext (Release)" --ws=cocoa --cpu=aarch64 --os=darwin Trndi.lpi
          test -f ./Trndi

      - name: Package artifact
        shell: bash
        run: |
            set -euo pipefail
            mkdir -p artifacts
            cp Trndi artifacts/
            if [ -d "lang" ]; then
            cp -r lang artifacts/
            else
            echo "Warning: lang directory not found"
            fi
            7z a -tzip Trndi-macos-silicon.zip ./artifacts/* >/dev/null

      - name: Create macOS App and DMG
        shell: bash
        run: |
            set -euo pipefail
            export PATH="/opt/local/libexec/fpc/bin:/opt/local/bin:/opt/local/sbin:$PATH"
            brew install create-dmg
            chmod +x dist/macos.sh
            # Copy lang folder to dist directory for the script to use
            if [ -d "lang" ]; then
            cp -r lang dist/
            fi
            (cd dist && ./macos.sh)
            mv dist/Trndi.dmg Trndi-macos-silicon.dmg

      - name: Upload Actions artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            Trndi-macos-silicon.zip
            Trndi-macos-silicon.dmg
          if-no-files-found: error

      - name: Publish to single release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          SHORT_SHA="${GITHUB_SHA::7}"
          TAG="v${SHORT_SHA}"

          cat > RELEASE_NOTES.md <<EOF
          # Trndi Release ${TAG}

          > This is an automated build of Trndi's latest source code.

          ### Trndi-linux-amd64.zip
          Linux computers running on amd64 processors (Extensions supported)

          ### Trndi-linux-arm64.zip
          Linux computers running on arm64 processors, including RaspberryPi

          ### Trndi-macos-silicon.zip
          macOS computers, with Apple processors

          ### Trndi-windows-x64.zip
          Windows computers (Extensions supported)

          #### You can manually build Trndi from source for a variety of other platforms.
          EOF

          if ! gh release view "$TAG" >/dev/null 2>&1; then
            gh release create "$TAG" --title "Trndi ${TAG}" --notes-file RELEASE_NOTES.md
          fi

          gh release upload "$TAG" "Trndi-macos-silicon.zip" --clobber
          gh release upload "$TAG" "Trndi-macos-silicon.dmg" --clobber