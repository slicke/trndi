name: Build Trndi for Linux ARM64 (Qt6 Widgetset)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-linux-arm64-qt6:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # 1. Check out repository
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Set up QEMU for ARM64 emulation
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # 3. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Cache Lazarus/FPC installation
      - name: Cache Lazarus/FPC ARM64
        id: cache-lazarus-arm64
        uses: actions/cache@v3
        with:
          path: ~/.cache/lazarus-arm64
          key: lazarus-fpc-linux-arm64-qt6-v7

      # 4.5. Cache Qt6Pas built libraries (.so files)
      - name: Cache Qt6Pas Libraries ARM64
        id: cache-qt6pas-libs-arm64
        uses: actions/cache@v3
        with:
          path: qt6pas-libs-arm64
          key: qt6pas-libraries-arm64-v4
          restore-keys: |
            qt6pas-libraries-arm64-

      # 5. Download ARM64 .deb files
      - name: Download Lazarus 4.0 ARM64 .deb files
        run: |
          wget https://download.lazarus-ide.org/Lazarus%20Linux%20arm64%20DEB/Lazarus%204.0/lazarus-project_4.0.0-0_arm64.deb
          wget https://download.lazarus-ide.org/Lazarus%20Linux%20arm64%20DEB/Lazarus%204.0/fpc-laz_3.2.3-240813_arm64.deb
          wget https://download.lazarus-ide.org/Lazarus%20Linux%20arm64%20DEB/Lazarus%204.0/fpc-src_3.2.3-240813_arm64.deb

      # 5.5. Prepare Qt6Pas cache directory
      - name: Prepare Qt6Pas cache directory
        run: |
          mkdir -p qt6pas-libs-arm64
          if [ ! "$(ls -A qt6pas-libs-arm64)" ]; then
            echo "# Qt6Pas cache placeholder" > qt6pas-libs-arm64/.placeholder
          fi
          echo "Qt6Pas cache directory prepared:"
          ls -la qt6pas-libs-arm64/

      # 6. Create ARM64 build environment with OpenGL support
      - name: Build in ARM64 environment
        run: |
          cat > Dockerfile.arm64 << 'EOF'
          FROM arm64v8/ubuntu:22.04
          
          ENV DEBIAN_FRONTEND=noninteractive
          ENV PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
          
          # Install base dependencies + OpenGL libraries for Qt6Pas compilation
          RUN apt-get update && apt-get install -y \
              p7zip-full \
              build-essential \
              qt6-base-dev \
              qt6-tools-dev \
              qt6-tools-dev-tools \
              qt6-qpa-plugins \
              qt6-opengl6-dev \
              git \
              wget \
              mesa-common-dev \
              libgl1-mesa-dev \
              libgles2-mesa-dev \
              libegl1-mesa-dev \
              libglx-dev \
              libx11-dev \
              && rm -rf /var/lib/apt/lists/*
          
          # Copy .deb files and Qt6Pas cache
          COPY *.deb /tmp/
          COPY qt6pas-libs-arm64/ /tmp/qt6pas-cache/
          
          # Install Lazarus and FPC
          RUN cd /tmp && \
              dpkg -i fpc-laz_3.2.3-240813_arm64.deb fpc-src_3.2.3-240813_arm64.deb lazarus-project_4.0.0-0_arm64.deb || \
              (apt-get update && apt-get install -f -y)
          
          # Check Qt6Pas cache status
          RUN echo "=== Qt6Pas Cache Check ===" && \
              echo "Cache contents:" && \
              ls -la /tmp/qt6pas-cache/
          
          # Try to use cached Qt6Pas first
          RUN if [ -f "/tmp/qt6pas-cache/libQt6Pas.so" ]; then \
                echo "=== Using cached Qt6Pas libraries ===" && \
                cp /tmp/qt6pas-cache/libQt6Pas* /usr/local/lib/ && \
                ldconfig && \
                echo "Qt6Pas cache restored successfully"; \
              else \
                echo "=== No usable Qt6Pas cache found ==="; \
              fi
          
          # Build Qt6Pas from source if not cached
          RUN if [ ! -f "/usr/local/lib/libQt6Pas.so" ] && [ ! -f "/usr/lib/aarch64-linux-gnu/libQt6Pas.so" ]; then \
                echo "=== Building Qt6Pas from source ===" && \
                git clone --depth 1 https://github.com/User4martin/lazarus.git /tmp/lazarus-source; \
              else \
                echo "=== Qt6Pas already available, skipping build ==="; \
              fi
          
          # Verify OpenGL headers before compilation
          RUN if [ -d "/tmp/lazarus-source" ]; then \
                echo "=== Verifying OpenGL headers ===" && \
                ls -la /usr/include/GL/ && \
                echo "Qt6 OpenGL include path:" && \
                find /usr/include -name "qopengl.h" 2>/dev/null && \
                echo "Mesa headers:" && \
                (pkg-config --cflags gl || echo "GL pkg-config not found"); \
              fi
          
          # Compile Qt6Pas with OpenGL support
          RUN if [ -d "/tmp/lazarus-source" ]; then \
                echo "=== Compiling Qt6Pas with OpenGL support ===" && \
                cd /tmp/lazarus-source/lcl/interfaces/qt6/cbindings && \
                echo "Running qmake6..." && \
                qmake6 && \
                echo "Running make with OpenGL support..." && \
                make -j$(nproc); \
              else \
                echo "=== Skipping Qt6Pas compilation ==="; \
              fi
          
          # Install compiled Qt6Pas
          RUN if [ -d "/tmp/lazarus-source" ]; then \
                echo "=== Installing Qt6Pas ===" && \
                cd /tmp/lazarus-source/lcl/interfaces/qt6/cbindings && \
                make install && \
                ldconfig; \
              else \
                echo "=== Qt6Pas installation not needed ==="; \
              fi
          
          # Verify final installation
          RUN echo "=== Final Qt6Pas Verification ===" && \
              lazbuild --version && \
              fpc -iV && \
              qmake6 -version && \
              echo "Qt6Pas libraries found:" && \
              (find /usr -name "libQt6Pas*" 2>/dev/null || echo "No Qt6Pas libraries found") && \
              (ldconfig -p | grep Qt6Pas || echo "Qt6Pas not in ldconfig")
          
          WORKDIR /workspace
          EOF
          
          docker buildx build --platform linux/arm64 --load -f Dockerfile.arm64 -t trndi-arm64-builder .

      # 6.5. Extract Qt6Pas libraries from container for caching
      - name: Extract and cache Qt6Pas libraries
        if: steps.cache-qt6pas-libs-arm64.outputs.cache-hit != 'true'
        run: |
          echo "=== Extracting Qt6Pas libraries for caching ==="
          rm -f qt6pas-libs-arm64/.placeholder
          
          docker run --rm --platform linux/arm64 \
            -v $(pwd)/qt6pas-libs-arm64:/output \
            trndi-arm64-builder \
            bash -c "
              echo 'Searching for Qt6Pas libraries...'
              find /usr/local/lib -name 'libQt6Pas*' -exec cp {} /output/ \; 2>/dev/null || echo 'No libs in /usr/local/lib'
              find /usr/lib -name 'libQt6Pas*' -exec cp {} /output/ \; 2>/dev/null || echo 'No libs in /usr/lib'  
              find /usr/lib/aarch64-linux-gnu -name 'libQt6Pas*' -exec cp {} /output/ \; 2>/dev/null || echo 'No libs in /usr/lib/aarch64-linux-gnu'
              echo 'Final extracted files:'
              ls -la /output/
            " || echo "Qt6Pas extraction completed with warnings"

      # Samma cache steps som innan
      - name: Restore Static Libraries Cache ARM64
        id: cache-static-arm64
        uses: actions/cache@v3
        with:
          path: ../static-arm64
          key: static-libraries-linux-arm64-qt6

      - name: Download and Extract Static Libraries ARM64
        if: steps.cache-static-arm64.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/synopse/mORMot2/releases/download/2.3.stable/mormot2static.7z
          mkdir -p ../static-arm64
          7z x mormot2static.7z -o../static-arm64 -y

      - name: Save Static Libraries Cache ARM64
        if: steps.cache-static-arm64.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: ../static-arm64
          key: static-libraries-linux-arm64-qt6

      - name: Copy Static Libraries ARM64
        run: |
          cp -r ../static-arm64/aarch64-linux/* . 2>/dev/null || \
          cp -r ../static-arm64/arm64-linux/* . 2>/dev/null || \
          echo 'No ARM64 static libs found to copy'

      - name: Restore mORMot2 Cache ARM64
        id: cache-mormot2-arm64
        uses: actions/cache@v3
        with:
          path: externals/mORMot2
          key: mormot2-repo-linux-arm64

      - name: Clone mORMot2 Repository ARM64
        if: steps.cache-mormot2-arm64.outputs.cache-hit != 'true'
        run: |
          mkdir -p externals
          git clone https://github.com/synopse/mORMot2.git externals/mORMot2

      # Build steps
      - name: Build inside ARM64 container
        run: |
          docker run --rm --platform linux/arm64 \
            -v $(pwd):/workspace \
            -w /workspace \
            trndi-arm64-builder \
            bash -c "
              echo '=== ARM64 Build with Qt6Pas ===' && \
              uname -m && \
              
              echo '=== Final Qt6Pas Status ===' && \
              (ldconfig -p | grep Qt6Pas && echo 'Qt6Pas found in system') || echo 'Qt6Pas not found, may cause build issues' && \
              
              echo '=== Build mORMot2 Package ===' && \
              lazbuild externals/mORMot2/packages/lazarus/mormot2.lpk && \
              
              echo '=== Build Trndi.lpr (Qt6 widgetset) ===' && \
              lazbuild --widgetset=qt6 --build-mode='Extensions (Release)' --cpu=aarch64 --os=linux Trndi.lpr || \
              (echo 'Qt6 build failed, trying GTK2 fallback...' && \
               apt-get update && apt-get install -y libgtk2.0-dev && \
               lazbuild --widgetset=gtk2 --build-mode='Extensions (Release)' --cpu=aarch64 --os=linux Trndi.lpr) && \
              
              echo '=== Verify build ===' && \
              file Trndi && ls -lh Trndi
            "

      # Artifact steps
      - name: Create artifacts directory
        run: |
          mkdir -p artifacts-arm64
          cp Trndi artifacts-arm64/

      - name: Verify ARM64 binary
        run: |
          echo "=== ARM64 Binary Verification ==="
          file artifacts-arm64/Trndi
          ls -lh artifacts-arm64/Trndi

      - name: Package artifact
        run: |
          cd artifacts-arm64
          zip ../Trndi-developer-build-linux-qt6-arm64.zip Trndi
          cd ..

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: Trndi-developer-build-linux-qt6-arm64.zip
          tag_name: v${{ github.run_number }}-linux-arm64
          name: Linux Qt6 ARM64 Build ${{ github.run_number }}
          body: |
            Linux ARM64 developer build from commit ${{ github.sha }} (Qt6 ARM64).
            
            Built with Qt6Pas caching and full OpenGL support.
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}