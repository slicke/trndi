name: Build Trndi for Linux ARM64 (Qt6 Widgetset)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-linux-arm64-qt6:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      # 1. Check out repository
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Set up QEMU for ARM64 emulation
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # 3. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Cache Lazarus/FPC installation
      - name: Cache Lazarus/FPC ARM64
        id: cache-lazarus-arm64
        uses: actions/cache@v3
        with:
          path: ~/.cache/lazarus-arm64
          key: lazarus-fpc-linux-arm64-qt6-v3

      # 5. Download Lazarus 4.0 ARM64 .deb files and Qt6Pas
      - name: Download Lazarus 4.0 ARM64 .deb files and Qt6Pas
        run: |
          wget https://download.lazarus-ide.org/Lazarus%20Linux%20arm64%20DEB/Lazarus%204.0/lazarus-project_4.0.0-0_arm64.deb
          wget https://download.lazarus-ide.org/Lazarus%20Linux%20arm64%20DEB/Lazarus%204.0/fpc-laz_3.2.3-240813_arm64.deb
          wget https://download.lazarus-ide.org/Lazarus%20Linux%20arm64%20DEB/Lazarus%204.0/fpc-src_3.2.3-240813_arm64.deb
          # AnvÃ¤nd Qt6Pas 6.2.10 och matcha systemets Qt till samma version
          wget https://github.com/davidbannon/libqt6pas/releases/download/v6.2.10/libqt6pas6_6.2.10-1_arm64.deb
          wget https://github.com/davidbannon/libqt6pas/releases/download/v6.2.10/libqt6pas6-dev_6.2.10-1_arm64.deb

      # 6. Create ARM64 build environment using Docker
      - name: Build in ARM64 environment
        run: |
          # Create Dockerfile with Qt 6.2.10+ for ARM64 build environment
          cat > Dockerfile.arm64 << 'EOF'
          FROM arm64v8/ubuntu:22.04
          
          # Set environment variables
          ENV DEBIAN_FRONTEND=noninteractive
          ENV PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
          ENV QT_SELECT=6
          
          # Install base dependencies
          RUN apt-get update && apt-get install -y \
              wget p7zip-full build-essential git cmake pkg-config \
              software-properties-common gpg-agent \
              && rm -rf /var/lib/apt/lists/*
          
          # Add newer Qt6 repository for matching versions
          RUN apt-get update && \
              echo "deb http://archive.ubuntu.com/ubuntu jammy-updates main" >> /etc/apt/sources.list && \
              echo "deb http://archive.ubuntu.com/ubuntu jammy-backports main" >> /etc/apt/sources.list && \
              apt-get update
          
          # Install newer Qt6 packages to match Qt6Pas 6.2.10
          RUN apt-get update && apt-get install -y \
              qt6-base-dev qt6-tools-dev qt6-tools-dev-tools \
              qt6-qpa-plugins libqt6core6 libqt6gui6 libqt6widgets6 \
              libqt6opengl6-dev libegl1-mesa-dev libgl1-mesa-dev \
              libgles2-mesa-dev mesa-common-dev \
              && rm -rf /var/lib/apt/lists/*
          
          # Verify Qt version after installation
          RUN echo "=== Qt6 Version Check ===" && \
              qmake6 -version && \
              pkg-config --modversion Qt6Core || echo "Qt6Core version check completed"
          
          # Copy .deb files
          COPY *.deb /tmp/
          
          # Install Lazarus and FPC
          RUN cd /tmp && \
              echo "=== Installing FPC and Lazarus ===" && \
              (dpkg -i fpc-laz_3.2.3-240813_arm64.deb fpc-src_3.2.3-240813_arm64.deb lazarus-project_4.0.0-0_arm64.deb || true) && \
              apt-get update && apt-get install -f -y
          
          # Install Qt6Pas runtime and development packages (version 6.2.10)
          RUN cd /tmp && \
              echo "=== Installing Qt6Pas 6.2.10 Runtime ===" && \
              (dpkg -i libqt6pas6_6.2.10-1_arm64.deb || true) && \
              echo "=== Installing Qt6Pas 6.2.10 Development ===" && \
              (dpkg -i libqt6pas6-dev_6.2.10-1_arm64.deb || true) && \
              echo "=== Fixing Qt6Pas dependencies ===" && \
              apt-get update && apt-get install -f -y && \
              (ldconfig || true)
          
          # Comprehensive verification of Qt6 and Qt6Pas
          RUN echo "=== Final Qt6 and Qt6Pas Verification ===" && \
              echo "Lazbuild:" && lazbuild --version && \
              echo "FPC:" && fpc -iV && \
              echo "QMake6:" && qmake6 -version && \
              echo "Qt6Pas libraries:" && \
              (ls -la /usr/lib/aarch64-linux-gnu/*Qt6Pas* 2>/dev/null || echo "Qt6Pas libs location check") && \
              echo "Qt6Pas headers:" && \
              (find /usr/include -name '*qt6pas*' -o -name '*Qt6Pas*' 2>/dev/null | head -3 || echo "Qt6Pas headers check") && \
              echo "Qt6 system libraries:" && \
              (ldconfig -p | grep -i qt6 | head -3 || echo "Qt6 system libs check") && \
              echo "Qt6Pas linkage check:" && \
              (ldd /usr/lib/aarch64-linux-gnu/libQt6Pas.so | head -5 || echo "Qt6Pas linkage check completed")
          
          WORKDIR /workspace
          EOF
          
          # Build the ARM64 Docker image
          docker buildx build --platform linux/arm64 --load -f Dockerfile.arm64 -t trndi-arm64-builder .

      # 7. Cache static libraries
      - name: Restore Static Libraries Cache ARM64
        id: cache-static-arm64
        uses: actions/cache@v3
        with:
          path: ../static-arm64
          key: static-libraries-linux-arm64-qt6

      # 8. Download and Extract Static Libraries if not cached
      - name: Download and Extract Static Libraries ARM64
        if: steps.cache-static-arm64.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/synopse/mORMot2/releases/download/2.3.stable/mormot2static.7z
          mkdir -p ../static-arm64
          7z x mormot2static.7z -o../static-arm64 -y

      - name: Save Static Libraries Cache ARM64
        if: steps.cache-static-arm64.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: ../static-arm64
          key: static-libraries-linux-arm64-qt6

      # 9. Copy static libraries to build folder
      - name: Copy Static Libraries ARM64
        run: |
          cp -r ../static-arm64/aarch64-linux/* . 2>/dev/null || \
          cp -r ../static-arm64/arm64-linux/* . 2>/dev/null || \
          echo 'No ARM64 static libs found to copy'

      # 10. Cache mORMot2 source
      - name: Restore mORMot2 Cache
        id: cache-mormot2-arm64
        uses: actions/cache@v3
        with:
          path: externals/mORMot2
          key: mormot2-repo-linux-arm64

      # 11. Clone mORMot2 Repository if needed
      - name: Clone mORMot2 Repository
        if: steps.cache-mormot2-arm64.outputs.cache-hit != 'true'
        run: |
          mkdir -p externals
          git clone https://github.com/synopse/mORMot2.git externals/mORMot2

      # 12. Build inside ARM64 container - Qt6 only
      - name: Build Trndi.lpr in ARM64 environment (Qt6 only)
        run: |
          docker run --rm --platform linux/arm64 \
            -v $(pwd):/workspace \
            -w /workspace \
            trndi-arm64-builder \
            bash -c "
              echo '=== ARM64 Qt6 Build Environment ===' && \
              uname -m && \
              echo 'FPC version:' && fpc -iV && \
              echo 'Lazbuild version:' && lazbuild --version && \
              echo 'QMake6 version:' && qmake6 -version && \
              echo '' && \
              
              echo '=== Pre-build Qt6 Environment Verification ===' && \
              echo 'Qt6 system version:' && \
              (pkg-config --modversion Qt6Core || echo 'Qt6Core version not available via pkg-config') && \
              echo 'Qt6Pas library linkage:' && \
              (ldd /usr/lib/aarch64-linux-gnu/libQt6Pas.so | grep -i qt6 | head -3 || echo 'Qt6Pas linkage check') && \
              echo '' && \
              
              echo '=== Building mORMot2 Package ===' && \
              lazbuild externals/mORMot2/packages/lazarus/mormot2.lpk && \
              echo '' && \
              
              echo '=== Building Trndi.lpr with Qt6 (matching versions) ===' && \
              export QT_SELECT=6 && \
              export LD_LIBRARY_PATH=\"/usr/lib/aarch64-linux-gnu:/usr/local/lib:\$LD_LIBRARY_PATH\" && \
              lazbuild \
                --verbose \
                --widgetset=qt6 \
                --build-mode='No Ext (Release)' \
                --cpu=aarch64 \
                --os=linux \
                Trndi.lpr && \
              echo 'Qt6 build SUCCESSFUL!' && \
              
              echo '=== Build Verification ===' && \
              echo 'Binary info:' && file Trndi && \
              echo 'Binary size:' && ls -lh Trndi && \
              echo 'Qt6 linkage verification:' && \
              (ldd Trndi | grep -i qt6 | head -5 || echo 'Qt6 linkage not detected in ldd')
            "

      # 13. Create artifacts directory
      - name: Create artifacts directory
        run: |
          mkdir -p artifacts-arm64
          if [ -f "Trndi" ]; then
            cp Trndi artifacts-arm64/
          else
            echo "Trndi binary not found!"
            exit 1
          fi

      # 14. Verify ARM64 binary
      - name: Verify ARM64 binary
        run: |
          if [ -f "artifacts-arm64/Trndi" ]; then
            echo "=== ARM64 Qt6 Binary Information ==="
            file artifacts-arm64/Trndi
            ls -lh artifacts-arm64/Trndi
            echo "=== Qt6 Widget Set Verification ==="
            strings artifacts-arm64/Trndi | grep -E "(Qt6|qt6)" | head -5 || echo "Qt6 strings not detected"
          else
            echo "ARM64 binary not found!"
            exit 1
          fi

      # 15. Package artifact
      - name: Package ARM64 artifact
        run: |
          cd artifacts-arm64
          zip ../Trndi-developer-build-linux-qt6-arm64.zip Trndi
          cd ..

      # 16. Create Release
      - name: Create ARM64 Release
        uses: softprops/action-gh-release@v1
        with:
          files: Trndi-developer-build-linux-qt6-arm64.zip
          tag_name: v${{ github.run_number }}-linux-arm64
          name: Linux Qt6 ARM64 Build ${{ github.run_number }}
          body: |
            Linux ARM64 developer build from commit ${{ github.sha }} (Qt6 ARM64).
            
            **Architecture**: ARM64 (aarch64)
            **Widgetset**: Qt6 Only
            **Platform**: Linux
            
            Built using QEMU emulation with Qt 6.2.10+ and matching Qt6Pas libraries.
            Version-matched Qt6 components to eliminate symbol conflicts.
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}