name: Linux ARM64 Builder (Qt6)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: trndi-build-linux-arm64-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Linux ARM64 (Qt6)
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build prerequisites (Qt6 toolchain)
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            p7zip-full \
            build-essential \
            wget \
            curl \
            git \
            cmake \
            ninja-build \
            pkg-config \
            qt6-base-dev \
            qt6-tools-dev \
            qt6-base-dev-tools

      - name: Install Lazarus + FPC (ARM64 DEBs)
        shell: bash
        run: |
          set -euo pipefail
          FPC_LAZ_URL="https://sourceforge.net/projects/lazarus/files/Lazarus%20Linux%20arm64%20DEB/Lazarus%204.2/fpc-laz_3.2.3-240813_arm64.deb/download"
          FPC_SRC_URL="https://sourceforge.net/projects/lazarus/files/Lazarus%20Linux%20arm64%20DEB/Lazarus%204.2/fpc-src_3.2.3-240813_arm64.deb/download"
          LAZ_URL="https://sourceforge.net/projects/lazarus/files/Lazarus%20Linux%20arm64%20DEB/Lazarus%204.2/lazarus-project_4.2.0-0_arm64.deb/download"

          echo "Downloading Lazarus + FPC ARM64 DEBs:"
          curl -fsSL -o fpc-laz.deb "${FPC_LAZ_URL}"
          curl -fsSL -o fpc-src.deb "${FPC_SRC_URL}"
          curl -fsSL -o lazarus.deb "${LAZ_URL}"

          sudo dpkg -i fpc-laz.deb fpc-src.deb lazarus.deb || true
          sudo apt-get -f install -y

          if ! command -v lazbuild >/dev/null 2>&1; then
            echo "lazbuild not found after install" >&2
            exit 1
          fi

      - name: Verify Native ARM64 Environment
        shell: bash
        run: |
          set -euo pipefail
          echo "CPU Architecture: $(uname -m)"
          echo "Primary Architecture: $(dpkg --print-architecture)"
          echo "Supported Architectures:"
          dpkg-architecture -L

      - name: Install libQt6Pas (ARM64 DEBs)
        shell: bash
        run: |
          set -euo pipefail
          QT6PAS_DEB="libqt6pas6_6.2.10-1_arm64.deb"
          QT6PAS_DEV_DEB="libqt6pas6-dev_6.2.10-1_arm64.deb"
          BASE_RELEASE="https://github.com/davidbannon/libqt6pas/releases/download/v6.2.10"
          curl -fL -o "${QT6PAS_DEB}" "${BASE_RELEASE}/${QT6PAS_DEB}"
          curl -fL -o "${QT6PAS_DEV_DEB}" "${BASE_RELEASE}/${QT6PAS_DEV_DEB}"
          sudo dpkg -i "${QT6PAS_DEB}" "${QT6PAS_DEV_DEB}" || true
          sudo apt-get -f install -y
          sudo ldconfig
          ldconfig -p | grep Qt6Pas || true

      - name: Prepare static libs and sources
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ./static
          curl -fsSL -o mormot2static.7z 'https://github.com/synopse/mORMot2/releases/download/2.3.stable/mormot2static.7z'
          7z x mormot2static.7z -o./static -y >/dev/null
          git clone https://github.com/synopse/mORMot2.git externals/mORMot2
          test -d ./static/aarch64-linux || { echo "Expected static/aarch64-linux not found" >&2; exit 1; }
          cp -r ./static/aarch64-linux/* .

      - name: Compilation (Qt6 ARM64 Widgetset)
        shell: bash
        run: |
          set -euo pipefail
          lazbuild externals/mORMot2/packages/lazarus/mormot2.lpk
          lazbuild --widgetset=qt6 --build-mode="No Ext (Release)" --cpu=aarch64 Trndi.lpi
          file ./Trndi || true
          ldd ./Trndi || true
          test -f ./Trndi

      - name: Package artifact
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts
          cp Trndi artifacts/
          if [ -d "lang" ]; then
            cp -r lang artifacts/
          else
            echo "Warning: lang directory not found"
          fi
          if [ -f "Trndi.png" ]; then
            cp Trndi.png artifacts/
          fi
          7z a -tzip Trndi-linux-arm64.zip ./artifacts/* >/dev/null

      - name: Build DEB and RPM packages with fpm
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential rpm
          sudo gem install --no-document fpm

          PKG_DIR="pkgroot"
          mkdir -p "$PKG_DIR/usr/local/trndi"
          cp Trndi "$PKG_DIR/usr/local/trndi/"
          if [ -d "lang" ]; then
            cp -r lang "$PKG_DIR/usr/local/trndi/"
          fi

          mkdir -p "$PKG_DIR/usr/share/pixmaps"
          if [ -f "Trndi.png" ]; then
            cp Trndi.png "$PKG_DIR/usr/share/pixmaps/"
            ICON=Trndi.png
          else
            ICON=utilities-terminal
          fi

          mkdir -p "$PKG_DIR/usr/share/applications"
          cat > "$PKG_DIR/usr/share/applications/trndi.desktop" <<EOF
[Desktop Entry]
Name=Trndi
Exec=/usr/local/trndi/Trndi
Icon=${ICON}
Type=Application
Categories=Utility;
EOF

          fpm -s dir -t deb \
            -n trndi \
            -v 1.0.${GITHUB_RUN_NUMBER} \
            --architecture arm64 \
            --description "Trndi application with translations" \
            --license "GPLv3" \
            -C "$PKG_DIR" .

          fpm -s dir -t rpm \
            -n trndi \
            -v 1.0.${GITHUB_RUN_NUMBER} \
            --architecture aarch64 \
            --description "Trndi application with translations" \
            --license "GPLv3" \
            -C "$PKG_DIR" .

          for f in trndi_*deb; do mv "$f" "${f%.deb}_arm64.deb"; done
          for f in trndi-*rpm; do mv "$f" "${f%.rpm}.aarch64.rpm"; done
          mv trndi_*arm64.deb trndi-*.aarch64.rpm artifacts/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-build
          path: |
            Trndi-linux-arm64.zip
            artifacts/*.deb
            artifacts/*.rpm
          if-no-files-found: error

      - name: Publish to release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          SHORT_SHA="${GITHUB_SHA::7}"
          TAG="v${SHORT_SHA}"

          # Same notes as other platforms (only applied if we create the release)
          cat > RELEASE_NOTES.md <<EOF
          # Trndi Release ${TAG}

          > This is an automated build of Trndi's latest source code.

          ### Trndi-linux-amd64.zip
          Linux computers running on amd64 processors (Extensions supported)  
          - **trndi_*.deb** — Ubuntu/Debian installer (amd64)  
          - **trndi-*.rpm** — Fedora/OpenSUSE installer (x86_64)

          ### Trndi-linux-arm64.zip  
          Linux computers running on arm64 processors, including RaspberryPi  
          - **trndi_*.deb** — Ubuntu/Debian installer (arm64)  
          - **trndi-*.rpm** — Fedora/OpenSUSE installer (aarch64)

          ### Trndi-macos-silicon.zip
          macOS computers, with Apple processors
          #### Special requirements for macOS
          - Unzip the file
          - In a Terminal, run: \`xattr -c /path/to/extracted/Trndi\`
          - Replace \`/path/to/extracted/\` with the actual path where you extracted the files

          ### Trndi-macos-silicon.dmg
          macOS computers, with Apple processors  
          #### Special requirements for macOS
          - Open the DMG file
          - Drag Trndi.app to the Applications folder
          - In a Terminal, run: \`xattr -c /Applications/Trndi.app\`
          - Now you can launch Trndi from Applications or Spotlight

          ### Trndi-windows-x64.zip
          Windows computers (Extensions supported)

          #### You can manually build Trndi from source for a variety of other platforms.
          EOF

          if ! gh release view "$TAG" >/dev/null 2>&1; then
            gh release create "$TAG" --title "Trndi ${TAG}" --notes-file RELEASE_NOTES.md
          fi

          gh release upload "$TAG" \
            "Trndi-linux-arm64.zip" \
            artifacts/*.deb \
            artifacts/*.rpm \
            --clobber