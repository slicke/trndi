name: Windows Builder

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: trndi-build-windows-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build Windows
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure 7-Zip
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          if (-not (Test-Path 'C:\Program Files\7-Zip\7z.exe')) {
            if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
              throw "Chocolatey not available on runner."
            }
            choco install 7zip -y
          }

      - name: Install Lazarus (4.2 + FPC 3.2.2) via curl.exe with retries
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          # Robust download using curl.exe (NOT Invoke-WebRequest). No UA override needed.
          function Get-WithRetry {
            param(
              [Parameter(Mandatory=$true)][string]$Url,
              [Parameter(Mandatory=$true)][string]$OutFile,
              [int]$Retries = 5,
              [int]$DelaySec = 5
            )
            for ($i=1; $i -le $Retries; $i++) {
              & curl.exe -L --fail --retry 5 --retry-delay 3 -o $OutFile $Url
              if (Test-Path $OutFile) {
                try {
                  $fs = [System.IO.File]::OpenRead((Resolve-Path $OutFile))
                  try {
                    $bytes = New-Object byte[] 2
                    [void]$fs.Read($bytes, 0, 2)
                    $fs.Close()
                    # Validate 'MZ' PE signature and a sane size (>50MB)
                    if ($bytes[0] -eq 0x4D -and $bytes[1] -eq 0x5A) {
                      $size = (Get-Item $OutFile).Length
                      if ($size -gt 50000000) { return }
                    }
                  } finally {
                    if ($fs) { $fs.Dispose() }
                  }
                } catch { }
              }
              Write-Host "Download validation failed, retry $i/$Retries. Sleeping $DelaySec sec..."
              Start-Sleep -Seconds $DelaySec
              if (Test-Path $OutFile) { Remove-Item $OutFile -Force -ErrorAction SilentlyContinue }
            }
            throw "Failed to download a valid file from $Url after $Retries attempts."
          }

          $LazUrl = 'https://sourceforge.net/projects/lazarus/files/Lazarus%20Windows%2064%20bit/Lazarus%204.2/lazarus-4.2-fpc-3.2.2-win64.exe/download'
          Get-WithRetry -Url $LazUrl -OutFile 'lazarus-4.2.exe'

          Start-Process -FilePath '.\lazarus-4.2.exe' -ArgumentList '/VERYSILENT','/SP-','/NORESTART','/DIR=C:\Lazarus' -Wait
          if (-not (Test-Path "C:\Lazarus\lazbuild.exe")) {
            throw "lazbuild not found after install."
          }

      - name: Prepare static libs and sources
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path .\static -Force | Out-Null
          & curl.exe -L --fail -o mormot2static.7z "https://github.com/synopse/mORMot2/releases/download/2.3.stable/mormot2static.7z"
          & 'C:\Program Files\7-Zip\7z.exe' x '.\mormot2static.7z' -o'.\static' -y | Out-Null

          git clone https://github.com/synopse/mORMot2.git externals/mORMot2

          if (-not (Test-Path '.\static\x86_64-win64')) {
            throw "Expected static\x86_64-win64 not found."
          }
          xcopy .\static\x86_64-win64\*.* . /Y /E /I | Out-Null

      - name: Build
        shell: pwsh
        run: |
          & 'C:\Lazarus\lazbuild.exe' 'externals\mORMot2\packages\lazarus\mormot2.lpk'
          & 'C:\Lazarus\lazbuild.exe' --lazarusdir='C:\Lazarus' --build-mode='Extensions (Release)' 'Trndi.lpr'
          if (-not (Test-Path '.\Trndi.exe')) {
            throw "Build succeeded but Trndi.exe not found."
          }

      - name: Package artifact
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path artifacts -Force | Out-Null
          Copy-Item .\Trndi.exe .\artifacts\
          & 'C:\Program Files\7-Zip\7z.exe' a -tzip 'Trndi-developer-build-windows.zip' .\artifacts\* | Out-Null

      - name: Upload Actions artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: Trndi-developer-build-windows.zip
          if-no-files-found: error

      # Optional: append this artifact to a single release shared by all builders
      - name: Publish to single release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: v${{ github.sha }}
        run: |
          $ErrorActionPreference = "Stop"
          # Create if missing; ignore error if already exists
          gh release create "$env:TAG" --title "Trndi $env:TAG" --notes "Automated multi-OS build." 2>$null || $true
          gh release upload "$env:TAG" "Trndi-developer-build-windows.zip" --clobber